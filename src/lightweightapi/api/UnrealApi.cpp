/**
 * Stratis Node API
 * Access to the Stratis Node's api.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "lightweightapi/api/UnrealApi.h"
#include "lightweightapi/IHttpBody.h"
#include "lightweightapi/JsonBody.h"
#include "lightweightapi/MultipartFormData.h"

#include <boost/algorithm/string/replace.hpp>

#include <unordered_set>

namespace stratis {
namespace api {

using namespace stratis::api::model;

UnrealApi::UnrealApi(std::shared_ptr<const ApiClient> apiClient)
    : m_ApiClient(apiClient) {}

UnrealApi::~UnrealApi() {}

pplx::task<std::shared_ptr<BlockModel>>
UnrealApi::unity3dBlockGet(utility::string_t hash,
                           boost::optional<bool> showTransactionDetails,
                           boost::optional<bool> outputJson) const
{
    std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
        m_ApiClient->getConfiguration());
    utility::string_t localVarPath =
        utility::conversions::to_string_t("/Unity3d/block");

    std::map<utility::string_t, utility::string_t> localVarQueryParams;
    std::map<utility::string_t, utility::string_t> localVarHeaderParams(
        localVarApiConfiguration->getDefaultHeaders());
    std::map<utility::string_t, utility::string_t> localVarFormParams;
    std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

    std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("text/plain"));
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("application/json"));
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("text/json"));

    utility::string_t localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.size() == 0) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // JSON
    else if (localVarResponseHttpContentTypes.find(
                 utility::conversions::to_string_t("application/json")) !=
             localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // multipart formdata
    else if (localVarResponseHttpContentTypes.find(
                 utility::conversions::to_string_t("multipart/form-data")) !=
             localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("multipart/form-data");
    } else {
        throw ApiException(400, utility::conversions::to_string_t(
                                    "UnrealApi->unity3dBlockGet does not produce "
                                    "any supported media type"));
    }

    localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
        localVarResponseHttpContentType;

    std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;

    {
        localVarQueryParams[utility::conversions::to_string_t("Hash")] =
            ApiClient::parameterToString(hash);
    }
    if (showTransactionDetails) {
        localVarQueryParams[utility::conversions::to_string_t(
            "ShowTransactionDetails")] =
            ApiClient::parameterToString(*showTransactionDetails);
    }
    if (outputJson) {
        localVarQueryParams[utility::conversions::to_string_t("OutputJson")] =
            ApiClient::parameterToString(*outputJson);
    }

    std::shared_ptr<IHttpBody> localVarHttpBody;
    utility::string_t localVarRequestHttpContentType;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.size() == 0 ||
        localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
            "application/json")) != localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // multipart formdata
    else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t("multipart/form-data")) !=
             localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("multipart/form-data");
    } else if (localVarConsumeHttpContentTypes.find(
                   utility::conversions::to_string_t(
                       "application/x-www-form-urlencoded")) !=
               localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("application/x-www-form-urlencoded");
    } else {
        throw ApiException(415, utility::conversions::to_string_t(
                                    "UnrealApi->unity3dBlockGet does not consume "
                                    "any supported media type"));
    }

    return m_ApiClient
        ->callApi(localVarPath, utility::conversions::to_string_t("GET"),
                  localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                  localVarFormParams, localVarFileParams,
                  localVarRequestHttpContentType)
        .then([=](web::http::http_response localVarResponse) {
            if (m_ApiClient->getResponseHandler()) {
                m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                                  localVarResponse.headers());
            }

            // 1xx - informational : OK
            // 2xx - successful       : OK
            // 3xx - redirection   : OK
            // 4xx - client error  : not OK
            // 5xx - client error  : not OK
            if (localVarResponse.status_code() >= 400) {
                throw ApiException(
                    localVarResponse.status_code(),
                    utility::conversions::to_string_t(
                        "error calling unity3dBlockGet: ") +
                        localVarResponse.reason_phrase(),
                    std::make_shared<std::stringstream>(
                        localVarResponse.extract_utf8string(true).get()));
            }

            // check response content type
            if (localVarResponse.headers().has(
                    utility::conversions::to_string_t("Content-Type"))) {
                utility::string_t localVarContentType =
                    localVarResponse
                        .headers()[utility::conversions::to_string_t("Content-Type")];
                if (localVarContentType.find(localVarResponseHttpContentType) ==
                    std::string::npos) {
                    throw ApiException(
                        500,
                        utility::conversions::to_string_t(
                            "error calling unity3dBlockGet: unexpected response "
                            "type: ") +
                            localVarContentType,
                        std::make_shared<std::stringstream>(
                            localVarResponse.extract_utf8string(true).get()));
                }
            }

            return localVarResponse.extract_string();
        })
        .then([=](utility::string_t localVarResponse) {
            std::shared_ptr<BlockModel> localVarResult(new BlockModel());

            if (localVarResponseHttpContentType ==
                utility::conversions::to_string_t("application/json")) {
                web::json::value localVarJson =
                    web::json::value::parse(localVarResponse);

                ModelBase::fromJson(localVarJson, localVarResult);
            }
            // else if(localVarResponseHttpContentType ==
            // utility::conversions::to_string_t("multipart/form-data"))
            // {
            // TODO multipart response parsing
            // }
            else {
                throw ApiException(
                    500,
                    utility::conversions::to_string_t(
                        "error calling unity3dBlockGet: unsupported response type"));
            }

            return localVarResult;
        });
}
pplx::task<std::shared_ptr<NFTContractModel>>
UnrealApi::unity3dGetAllNftOwnersByContractAddressGet(
    boost::optional<utility::string_t> contractAddress) const
{
    std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
        m_ApiClient->getConfiguration());
    utility::string_t localVarPath = utility::conversions::to_string_t(
        "/Unity3d/get-all-nft-owners-by-contract-address");

    std::map<utility::string_t, utility::string_t> localVarQueryParams;
    std::map<utility::string_t, utility::string_t> localVarHeaderParams(
        localVarApiConfiguration->getDefaultHeaders());
    std::map<utility::string_t, utility::string_t> localVarFormParams;
    std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

    std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("text/plain"));
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("application/json"));
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("text/json"));

    utility::string_t localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.size() == 0) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // JSON
    else if (localVarResponseHttpContentTypes.find(
                 utility::conversions::to_string_t("application/json")) !=
             localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // multipart formdata
    else if (localVarResponseHttpContentTypes.find(
                 utility::conversions::to_string_t("multipart/form-data")) !=
             localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("multipart/form-data");
    } else {
        throw ApiException(
            400, utility::conversions::to_string_t(
                     "UnrealApi->unity3dGetAllNftOwnersByContractAddressGet does "
                     "not produce any supported media type"));
    }

    localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
        localVarResponseHttpContentType;

    std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;

    if (contractAddress) {
        localVarQueryParams[utility::conversions::to_string_t("contractAddress")] =
            ApiClient::parameterToString(*contractAddress);
    }

    std::shared_ptr<IHttpBody> localVarHttpBody;
    utility::string_t localVarRequestHttpContentType;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.size() == 0 ||
        localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
            "application/json")) != localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // multipart formdata
    else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t("multipart/form-data")) !=
             localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("multipart/form-data");
    } else if (localVarConsumeHttpContentTypes.find(
                   utility::conversions::to_string_t(
                       "application/x-www-form-urlencoded")) !=
               localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("application/x-www-form-urlencoded");
    } else {
        throw ApiException(
            415, utility::conversions::to_string_t(
                     "UnrealApi->unity3dGetAllNftOwnersByContractAddressGet does "
                     "not consume any supported media type"));
    }

    return m_ApiClient
        ->callApi(localVarPath, utility::conversions::to_string_t("GET"),
                  localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                  localVarFormParams, localVarFileParams,
                  localVarRequestHttpContentType)
        .then([=](web::http::http_response localVarResponse) {
            if (m_ApiClient->getResponseHandler()) {
                m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                                  localVarResponse.headers());
            }

            // 1xx - informational : OK
            // 2xx - successful       : OK
            // 3xx - redirection   : OK
            // 4xx - client error  : not OK
            // 5xx - client error  : not OK
            if (localVarResponse.status_code() >= 400) {
                throw ApiException(
                    localVarResponse.status_code(),
                    utility::conversions::to_string_t(
                        "error calling "
                        "unity3dGetAllNftOwnersByContractAddressGet: ") +
                        localVarResponse.reason_phrase(),
                    std::make_shared<std::stringstream>(
                        localVarResponse.extract_utf8string(true).get()));
            }

            // check response content type
            if (localVarResponse.headers().has(
                    utility::conversions::to_string_t("Content-Type"))) {
                utility::string_t localVarContentType =
                    localVarResponse
                        .headers()[utility::conversions::to_string_t("Content-Type")];
                if (localVarContentType.find(localVarResponseHttpContentType) ==
                    std::string::npos) {
                    throw ApiException(
                        500,
                        utility::conversions::to_string_t(
                            "error calling unity3dGetAllNftOwnersByContractAddressGet: "
                            "unexpected response type: ") +
                            localVarContentType,
                        std::make_shared<std::stringstream>(
                            localVarResponse.extract_utf8string(true).get()));
                }
            }

            return localVarResponse.extract_string();
        })
        .then([=](utility::string_t localVarResponse) {
            std::shared_ptr<NFTContractModel> localVarResult(
                new NFTContractModel());

            if (localVarResponseHttpContentType ==
                utility::conversions::to_string_t("application/json")) {
                web::json::value localVarJson =
                    web::json::value::parse(localVarResponse);

                ModelBase::fromJson(localVarJson, localVarResult);
            }
            // else if(localVarResponseHttpContentType ==
            // utility::conversions::to_string_t("multipart/form-data"))
            // {
            // TODO multipart response parsing
            // }
            else {
                throw ApiException(
                    500,
                    utility::conversions::to_string_t(
                        "error calling unity3dGetAllNftOwnersByContractAddressGet: "
                        "unsupported response type"));
            }

            return localVarResult;
        });
}
pplx::task<std::shared_ptr<OwnedNFTsModel>> UnrealApi::unity3dGetOwnedNftsGet(
    boost::optional<utility::string_t> ownerAddress) const
{
    std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
        m_ApiClient->getConfiguration());
    utility::string_t localVarPath =
        utility::conversions::to_string_t("/Unity3d/get-owned-nfts");

    std::map<utility::string_t, utility::string_t> localVarQueryParams;
    std::map<utility::string_t, utility::string_t> localVarHeaderParams(
        localVarApiConfiguration->getDefaultHeaders());
    std::map<utility::string_t, utility::string_t> localVarFormParams;
    std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

    std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("text/plain"));
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("application/json"));
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("text/json"));

    utility::string_t localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.size() == 0) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // JSON
    else if (localVarResponseHttpContentTypes.find(
                 utility::conversions::to_string_t("application/json")) !=
             localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // multipart formdata
    else if (localVarResponseHttpContentTypes.find(
                 utility::conversions::to_string_t("multipart/form-data")) !=
             localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("multipart/form-data");
    } else {
        throw ApiException(400, utility::conversions::to_string_t(
                                    "UnrealApi->unity3dGetOwnedNftsGet does not "
                                    "produce any supported media type"));
    }

    localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
        localVarResponseHttpContentType;

    std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;

    if (ownerAddress) {
        localVarQueryParams[utility::conversions::to_string_t("ownerAddress")] =
            ApiClient::parameterToString(*ownerAddress);
    }

    std::shared_ptr<IHttpBody> localVarHttpBody;
    utility::string_t localVarRequestHttpContentType;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.size() == 0 ||
        localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
            "application/json")) != localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // multipart formdata
    else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t("multipart/form-data")) !=
             localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("multipart/form-data");
    } else if (localVarConsumeHttpContentTypes.find(
                   utility::conversions::to_string_t(
                       "application/x-www-form-urlencoded")) !=
               localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("application/x-www-form-urlencoded");
    } else {
        throw ApiException(415, utility::conversions::to_string_t(
                                    "UnrealApi->unity3dGetOwnedNftsGet does not "
                                    "consume any supported media type"));
    }

    return m_ApiClient
        ->callApi(localVarPath, utility::conversions::to_string_t("GET"),
                  localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                  localVarFormParams, localVarFileParams,
                  localVarRequestHttpContentType)
        .then([=](web::http::http_response localVarResponse) {
            if (m_ApiClient->getResponseHandler()) {
                m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                                  localVarResponse.headers());
            }

            // 1xx - informational : OK
            // 2xx - successful       : OK
            // 3xx - redirection   : OK
            // 4xx - client error  : not OK
            // 5xx - client error  : not OK
            if (localVarResponse.status_code() >= 400) {
                throw ApiException(
                    localVarResponse.status_code(),
                    utility::conversions::to_string_t(
                        "error calling unity3dGetOwnedNftsGet: ") +
                        localVarResponse.reason_phrase(),
                    std::make_shared<std::stringstream>(
                        localVarResponse.extract_utf8string(true).get()));
            }

            // check response content type
            if (localVarResponse.headers().has(
                    utility::conversions::to_string_t("Content-Type"))) {
                utility::string_t localVarContentType =
                    localVarResponse
                        .headers()[utility::conversions::to_string_t("Content-Type")];
                if (localVarContentType.find(localVarResponseHttpContentType) ==
                    std::string::npos) {
                    throw ApiException(
                        500,
                        utility::conversions::to_string_t(
                            "error calling unity3dGetOwnedNftsGet: unexpected response "
                            "type: ") +
                            localVarContentType,
                        std::make_shared<std::stringstream>(
                            localVarResponse.extract_utf8string(true).get()));
                }
            }

            return localVarResponse.extract_string();
        })
        .then([=](utility::string_t localVarResponse) {
            std::shared_ptr<OwnedNFTsModel> localVarResult(new OwnedNFTsModel());

            if (localVarResponseHttpContentType ==
                utility::conversions::to_string_t("application/json")) {
                web::json::value localVarJson =
                    web::json::value::parse(localVarResponse);

                ModelBase::fromJson(localVarJson, localVarResult);
            }
            // else if(localVarResponseHttpContentType ==
            // utility::conversions::to_string_t("multipart/form-data"))
            // {
            // TODO multipart response parsing
            // }
            else {
                throw ApiException(500, utility::conversions::to_string_t(
                                            "error calling unity3dGetOwnedNftsGet: "
                                            "unsupported response type"));
            }

            return localVarResult;
        });
}
pplx::task<std::vector<utility::string_t>>
UnrealApi::unity3dGetWatchedNftContractsGet() const
{
    std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
        m_ApiClient->getConfiguration());
    utility::string_t localVarPath =
        utility::conversions::to_string_t("/Unity3d/get-watched-nft-contracts");

    std::map<utility::string_t, utility::string_t> localVarQueryParams;
    std::map<utility::string_t, utility::string_t> localVarHeaderParams(
        localVarApiConfiguration->getDefaultHeaders());
    std::map<utility::string_t, utility::string_t> localVarFormParams;
    std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

    std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("text/plain"));
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("application/json"));
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("text/json"));

    utility::string_t localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.size() == 0) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // JSON
    else if (localVarResponseHttpContentTypes.find(
                 utility::conversions::to_string_t("application/json")) !=
             localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // multipart formdata
    else if (localVarResponseHttpContentTypes.find(
                 utility::conversions::to_string_t("multipart/form-data")) !=
             localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("multipart/form-data");
    } else {
        throw ApiException(400, utility::conversions::to_string_t(
                                    "UnrealApi->unity3dGetWatchedNftContractsGet "
                                    "does not produce any supported media type"));
    }

    localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
        localVarResponseHttpContentType;

    std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;

    std::shared_ptr<IHttpBody> localVarHttpBody;
    utility::string_t localVarRequestHttpContentType;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.size() == 0 ||
        localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
            "application/json")) != localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // multipart formdata
    else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t("multipart/form-data")) !=
             localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("multipart/form-data");
    } else if (localVarConsumeHttpContentTypes.find(
                   utility::conversions::to_string_t(
                       "application/x-www-form-urlencoded")) !=
               localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("application/x-www-form-urlencoded");
    } else {
        throw ApiException(415, utility::conversions::to_string_t(
                                    "UnrealApi->unity3dGetWatchedNftContractsGet "
                                    "does not consume any supported media type"));
    }

    return m_ApiClient
        ->callApi(localVarPath, utility::conversions::to_string_t("GET"),
                  localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                  localVarFormParams, localVarFileParams,
                  localVarRequestHttpContentType)
        .then([=](web::http::http_response localVarResponse) {
            if (m_ApiClient->getResponseHandler()) {
                m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                                  localVarResponse.headers());
            }

            // 1xx - informational : OK
            // 2xx - successful       : OK
            // 3xx - redirection   : OK
            // 4xx - client error  : not OK
            // 5xx - client error  : not OK
            if (localVarResponse.status_code() >= 400) {
                throw ApiException(
                    localVarResponse.status_code(),
                    utility::conversions::to_string_t(
                        "error calling unity3dGetWatchedNftContractsGet: ") +
                        localVarResponse.reason_phrase(),
                    std::make_shared<std::stringstream>(
                        localVarResponse.extract_utf8string(true).get()));
            }

            // check response content type
            if (localVarResponse.headers().has(
                    utility::conversions::to_string_t("Content-Type"))) {
                utility::string_t localVarContentType =
                    localVarResponse
                        .headers()[utility::conversions::to_string_t("Content-Type")];
                if (localVarContentType.find(localVarResponseHttpContentType) ==
                    std::string::npos) {
                    throw ApiException(
                        500,
                        utility::conversions::to_string_t(
                            "error calling unity3dGetWatchedNftContractsGet: "
                            "unexpected response type: ") +
                            localVarContentType,
                        std::make_shared<std::stringstream>(
                            localVarResponse.extract_utf8string(true).get()));
                }
            }

            return localVarResponse.extract_string();
        })
        .then([=](utility::string_t localVarResponse) {
            std::vector<utility::string_t> localVarResult;

            if (localVarResponseHttpContentType ==
                utility::conversions::to_string_t("application/json")) {
                web::json::value localVarJson =
                    web::json::value::parse(localVarResponse);
                for (auto& localVarItem : localVarJson.as_array()) {
                    utility::string_t localVarItemObj;
                    ModelBase::fromJson(localVarItem, localVarItemObj);
                    localVarResult.push_back(localVarItemObj);
                }
            }
            // else if(localVarResponseHttpContentType ==
            // utility::conversions::to_string_t("multipart/form-data"))
            // {
            // TODO multipart response parsing
            // }
            else {
                throw ApiException(
                    500, utility::conversions::to_string_t(
                             "error calling unity3dGetWatchedNftContractsGet: "
                             "unsupported response type"));
            }

            return localVarResult;
        });
}
pplx::task<std::shared_ptr<GetBalanceResponseModel>>
UnrealApi::unity3dGetaddressbalanceGet(
    boost::optional<utility::string_t> address) const
{
    std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
        m_ApiClient->getConfiguration());
    utility::string_t localVarPath =
        utility::conversions::to_string_t("/Unity3d/getaddressbalance");

    std::map<utility::string_t, utility::string_t> localVarQueryParams;
    std::map<utility::string_t, utility::string_t> localVarHeaderParams(
        localVarApiConfiguration->getDefaultHeaders());
    std::map<utility::string_t, utility::string_t> localVarFormParams;
    std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

    std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("text/plain"));
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("application/json"));
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("text/json"));

    utility::string_t localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.size() == 0) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // JSON
    else if (localVarResponseHttpContentTypes.find(
                 utility::conversions::to_string_t("application/json")) !=
             localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // multipart formdata
    else if (localVarResponseHttpContentTypes.find(
                 utility::conversions::to_string_t("multipart/form-data")) !=
             localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("multipart/form-data");
    } else {
        throw ApiException(400, utility::conversions::to_string_t(
                                    "UnrealApi->unity3dGetaddressbalanceGet does "
                                    "not produce any supported media type"));
    }

    localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
        localVarResponseHttpContentType;

    std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;

    if (address) {
        localVarQueryParams[utility::conversions::to_string_t("address")] =
            ApiClient::parameterToString(*address);
    }

    std::shared_ptr<IHttpBody> localVarHttpBody;
    utility::string_t localVarRequestHttpContentType;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.size() == 0 ||
        localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
            "application/json")) != localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // multipart formdata
    else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t("multipart/form-data")) !=
             localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("multipart/form-data");
    } else if (localVarConsumeHttpContentTypes.find(
                   utility::conversions::to_string_t(
                       "application/x-www-form-urlencoded")) !=
               localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("application/x-www-form-urlencoded");
    } else {
        throw ApiException(415, utility::conversions::to_string_t(
                                    "UnrealApi->unity3dGetaddressbalanceGet does "
                                    "not consume any supported media type"));
    }

    return m_ApiClient
        ->callApi(localVarPath, utility::conversions::to_string_t("GET"),
                  localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                  localVarFormParams, localVarFileParams,
                  localVarRequestHttpContentType)
        .then([=](web::http::http_response localVarResponse) {
            if (m_ApiClient->getResponseHandler()) {
                m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                                  localVarResponse.headers());
            }

            // 1xx - informational : OK
            // 2xx - successful       : OK
            // 3xx - redirection   : OK
            // 4xx - client error  : not OK
            // 5xx - client error  : not OK
            if (localVarResponse.status_code() >= 400) {
                throw ApiException(
                    localVarResponse.status_code(),
                    utility::conversions::to_string_t(
                        "error calling unity3dGetaddressbalanceGet: ") +
                        localVarResponse.reason_phrase(),
                    std::make_shared<std::stringstream>(
                        localVarResponse.extract_utf8string(true).get()));
            }

            // check response content type
            if (localVarResponse.headers().has(
                    utility::conversions::to_string_t("Content-Type"))) {
                utility::string_t localVarContentType =
                    localVarResponse
                        .headers()[utility::conversions::to_string_t("Content-Type")];
                if (localVarContentType.find(localVarResponseHttpContentType) ==
                    std::string::npos) {
                    throw ApiException(
                        500,
                        utility::conversions::to_string_t(
                            "error calling unity3dGetaddressbalanceGet: unexpected "
                            "response type: ") +
                            localVarContentType,
                        std::make_shared<std::stringstream>(
                            localVarResponse.extract_utf8string(true).get()));
                }
            }

            return localVarResponse.extract_string();
        })
        .then([=](utility::string_t localVarResponse) {
            std::shared_ptr<GetBalanceResponseModel> localVarResult(
                new GetBalanceResponseModel());

            if (localVarResponseHttpContentType ==
                utility::conversions::to_string_t("application/json")) {
                web::json::value localVarJson =
                    web::json::value::parse(localVarResponse);

                ModelBase::fromJson(localVarJson, localVarResult);
            }
            // else if(localVarResponseHttpContentType ==
            // utility::conversions::to_string_t("multipart/form-data"))
            // {
            // TODO multipart response parsing
            // }
            else {
                throw ApiException(500,
                                   utility::conversions::to_string_t(
                                       "error calling unity3dGetaddressbalanceGet: "
                                       "unsupported response type"));
            }

            return localVarResult;
        });
}
pplx::task<std::shared_ptr<BlockHeaderModel>>
UnrealApi::unity3dGetblockheaderGet(
    boost::optional<utility::string_t> hash) const
{
    std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
        m_ApiClient->getConfiguration());
    utility::string_t localVarPath =
        utility::conversions::to_string_t("/Unity3d/getblockheader");

    std::map<utility::string_t, utility::string_t> localVarQueryParams;
    std::map<utility::string_t, utility::string_t> localVarHeaderParams(
        localVarApiConfiguration->getDefaultHeaders());
    std::map<utility::string_t, utility::string_t> localVarFormParams;
    std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

    std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("text/plain"));
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("application/json"));
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("text/json"));

    utility::string_t localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.size() == 0) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // JSON
    else if (localVarResponseHttpContentTypes.find(
                 utility::conversions::to_string_t("application/json")) !=
             localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // multipart formdata
    else if (localVarResponseHttpContentTypes.find(
                 utility::conversions::to_string_t("multipart/form-data")) !=
             localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("multipart/form-data");
    } else {
        throw ApiException(400, utility::conversions::to_string_t(
                                    "UnrealApi->unity3dGetblockheaderGet does not "
                                    "produce any supported media type"));
    }

    localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
        localVarResponseHttpContentType;

    std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;

    if (hash) {
        localVarQueryParams[utility::conversions::to_string_t("hash")] =
            ApiClient::parameterToString(*hash);
    }

    std::shared_ptr<IHttpBody> localVarHttpBody;
    utility::string_t localVarRequestHttpContentType;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.size() == 0 ||
        localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
            "application/json")) != localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // multipart formdata
    else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t("multipart/form-data")) !=
             localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("multipart/form-data");
    } else if (localVarConsumeHttpContentTypes.find(
                   utility::conversions::to_string_t(
                       "application/x-www-form-urlencoded")) !=
               localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("application/x-www-form-urlencoded");
    } else {
        throw ApiException(415, utility::conversions::to_string_t(
                                    "UnrealApi->unity3dGetblockheaderGet does not "
                                    "consume any supported media type"));
    }

    return m_ApiClient
        ->callApi(localVarPath, utility::conversions::to_string_t("GET"),
                  localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                  localVarFormParams, localVarFileParams,
                  localVarRequestHttpContentType)
        .then([=](web::http::http_response localVarResponse) {
            if (m_ApiClient->getResponseHandler()) {
                m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                                  localVarResponse.headers());
            }

            // 1xx - informational : OK
            // 2xx - successful       : OK
            // 3xx - redirection   : OK
            // 4xx - client error  : not OK
            // 5xx - client error  : not OK
            if (localVarResponse.status_code() >= 400) {
                throw ApiException(
                    localVarResponse.status_code(),
                    utility::conversions::to_string_t(
                        "error calling unity3dGetblockheaderGet: ") +
                        localVarResponse.reason_phrase(),
                    std::make_shared<std::stringstream>(
                        localVarResponse.extract_utf8string(true).get()));
            }

            // check response content type
            if (localVarResponse.headers().has(
                    utility::conversions::to_string_t("Content-Type"))) {
                utility::string_t localVarContentType =
                    localVarResponse
                        .headers()[utility::conversions::to_string_t("Content-Type")];
                if (localVarContentType.find(localVarResponseHttpContentType) ==
                    std::string::npos) {
                    throw ApiException(
                        500,
                        utility::conversions::to_string_t(
                            "error calling unity3dGetblockheaderGet: unexpected "
                            "response type: ") +
                            localVarContentType,
                        std::make_shared<std::stringstream>(
                            localVarResponse.extract_utf8string(true).get()));
                }
            }

            return localVarResponse.extract_string();
        })
        .then([=](utility::string_t localVarResponse) {
            std::shared_ptr<BlockHeaderModel> localVarResult(
                new BlockHeaderModel());

            if (localVarResponseHttpContentType ==
                utility::conversions::to_string_t("application/json")) {
                web::json::value localVarJson =
                    web::json::value::parse(localVarResponse);

                ModelBase::fromJson(localVarJson, localVarResult);
            }
            // else if(localVarResponseHttpContentType ==
            // utility::conversions::to_string_t("multipart/form-data"))
            // {
            // TODO multipart response parsing
            // }
            else {
                throw ApiException(500, utility::conversions::to_string_t(
                                            "error calling unity3dGetblockheaderGet: "
                                            "unsupported response type"));
            }

            return localVarResult;
        });
}
pplx::task<std::shared_ptr<RawTxModel>> UnrealApi::unity3dGetrawtransactionGet(
    boost::optional<utility::string_t> trxid) const
{
    std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
        m_ApiClient->getConfiguration());
    utility::string_t localVarPath =
        utility::conversions::to_string_t("/Unity3d/getrawtransaction");

    std::map<utility::string_t, utility::string_t> localVarQueryParams;
    std::map<utility::string_t, utility::string_t> localVarHeaderParams(
        localVarApiConfiguration->getDefaultHeaders());
    std::map<utility::string_t, utility::string_t> localVarFormParams;
    std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

    std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("text/plain"));
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("application/json"));
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("text/json"));

    utility::string_t localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.size() == 0) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // JSON
    else if (localVarResponseHttpContentTypes.find(
                 utility::conversions::to_string_t("application/json")) !=
             localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // multipart formdata
    else if (localVarResponseHttpContentTypes.find(
                 utility::conversions::to_string_t("multipart/form-data")) !=
             localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("multipart/form-data");
    } else {
        throw ApiException(400, utility::conversions::to_string_t(
                                    "UnrealApi->unity3dGetrawtransactionGet does "
                                    "not produce any supported media type"));
    }

    localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
        localVarResponseHttpContentType;

    std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;

    if (trxid) {
        localVarQueryParams[utility::conversions::to_string_t("trxid")] =
            ApiClient::parameterToString(*trxid);
    }

    std::shared_ptr<IHttpBody> localVarHttpBody;
    utility::string_t localVarRequestHttpContentType;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.size() == 0 ||
        localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
            "application/json")) != localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // multipart formdata
    else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t("multipart/form-data")) !=
             localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("multipart/form-data");
    } else if (localVarConsumeHttpContentTypes.find(
                   utility::conversions::to_string_t(
                       "application/x-www-form-urlencoded")) !=
               localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("application/x-www-form-urlencoded");
    } else {
        throw ApiException(415, utility::conversions::to_string_t(
                                    "UnrealApi->unity3dGetrawtransactionGet does "
                                    "not consume any supported media type"));
    }

    return m_ApiClient
        ->callApi(localVarPath, utility::conversions::to_string_t("GET"),
                  localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                  localVarFormParams, localVarFileParams,
                  localVarRequestHttpContentType)
        .then([=](web::http::http_response localVarResponse) {
            if (m_ApiClient->getResponseHandler()) {
                m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                                  localVarResponse.headers());
            }

            // 1xx - informational : OK
            // 2xx - successful       : OK
            // 3xx - redirection   : OK
            // 4xx - client error  : not OK
            // 5xx - client error  : not OK
            if (localVarResponse.status_code() >= 400) {
                throw ApiException(
                    localVarResponse.status_code(),
                    utility::conversions::to_string_t(
                        "error calling unity3dGetrawtransactionGet: ") +
                        localVarResponse.reason_phrase(),
                    std::make_shared<std::stringstream>(
                        localVarResponse.extract_utf8string(true).get()));
            }

            // check response content type
            if (localVarResponse.headers().has(
                    utility::conversions::to_string_t("Content-Type"))) {
                utility::string_t localVarContentType =
                    localVarResponse
                        .headers()[utility::conversions::to_string_t("Content-Type")];
                if (localVarContentType.find(localVarResponseHttpContentType) ==
                    std::string::npos) {
                    throw ApiException(
                        500,
                        utility::conversions::to_string_t(
                            "error calling unity3dGetrawtransactionGet: unexpected "
                            "response type: ") +
                            localVarContentType,
                        std::make_shared<std::stringstream>(
                            localVarResponse.extract_utf8string(true).get()));
                }
            }

            return localVarResponse.extract_string();
        })
        .then([=](utility::string_t localVarResponse) {
            std::shared_ptr<RawTxModel> localVarResult(new RawTxModel());

            if (localVarResponseHttpContentType ==
                utility::conversions::to_string_t("application/json")) {
                web::json::value localVarJson =
                    web::json::value::parse(localVarResponse);

                ModelBase::fromJson(localVarJson, localVarResult);
            }
            // else if(localVarResponseHttpContentType ==
            // utility::conversions::to_string_t("multipart/form-data"))
            // {
            // TODO multipart response parsing
            // }
            else {
                throw ApiException(500,
                                   utility::conversions::to_string_t(
                                       "error calling unity3dGetrawtransactionGet: "
                                       "unsupported response type"));
            }

            return localVarResult;
        });
}
pplx::task<std::shared_ptr<GetUTXOsResponseModel>>
UnrealApi::unity3dGetutxosforaddressGet(
    boost::optional<utility::string_t> address) const
{
    std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
        m_ApiClient->getConfiguration());
    utility::string_t localVarPath =
        utility::conversions::to_string_t("/Unity3d/getutxosforaddress");

    std::map<utility::string_t, utility::string_t> localVarQueryParams;
    std::map<utility::string_t, utility::string_t> localVarHeaderParams(
        localVarApiConfiguration->getDefaultHeaders());
    std::map<utility::string_t, utility::string_t> localVarFormParams;
    std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

    std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("text/plain"));
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("application/json"));
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("text/json"));

    utility::string_t localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.size() == 0) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // JSON
    else if (localVarResponseHttpContentTypes.find(
                 utility::conversions::to_string_t("application/json")) !=
             localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // multipart formdata
    else if (localVarResponseHttpContentTypes.find(
                 utility::conversions::to_string_t("multipart/form-data")) !=
             localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("multipart/form-data");
    } else {
        throw ApiException(400, utility::conversions::to_string_t(
                                    "UnrealApi->unity3dGetutxosforaddressGet does "
                                    "not produce any supported media type"));
    }

    localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
        localVarResponseHttpContentType;

    std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;

    if (address) {
        localVarQueryParams[utility::conversions::to_string_t("address")] =
            ApiClient::parameterToString(*address);
    }

    std::shared_ptr<IHttpBody> localVarHttpBody;
    utility::string_t localVarRequestHttpContentType;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.size() == 0 ||
        localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
            "application/json")) != localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // multipart formdata
    else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t("multipart/form-data")) !=
             localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("multipart/form-data");
    } else if (localVarConsumeHttpContentTypes.find(
                   utility::conversions::to_string_t(
                       "application/x-www-form-urlencoded")) !=
               localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("application/x-www-form-urlencoded");
    } else {
        throw ApiException(415, utility::conversions::to_string_t(
                                    "UnrealApi->unity3dGetutxosforaddressGet does "
                                    "not consume any supported media type"));
    }

    return m_ApiClient
        ->callApi(localVarPath, utility::conversions::to_string_t("GET"),
                  localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                  localVarFormParams, localVarFileParams,
                  localVarRequestHttpContentType)
        .then([=](web::http::http_response localVarResponse) {
            if (m_ApiClient->getResponseHandler()) {
                m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                                  localVarResponse.headers());
            }

            // 1xx - informational : OK
            // 2xx - successful       : OK
            // 3xx - redirection   : OK
            // 4xx - client error  : not OK
            // 5xx - client error  : not OK
            if (localVarResponse.status_code() >= 400) {
                throw ApiException(
                    localVarResponse.status_code(),
                    utility::conversions::to_string_t(
                        "error calling unity3dGetutxosforaddressGet: ") +
                        localVarResponse.reason_phrase(),
                    std::make_shared<std::stringstream>(
                        localVarResponse.extract_utf8string(true).get()));
            }

            // check response content type
            if (localVarResponse.headers().has(
                    utility::conversions::to_string_t("Content-Type"))) {
                utility::string_t localVarContentType =
                    localVarResponse
                        .headers()[utility::conversions::to_string_t("Content-Type")];
                if (localVarContentType.find(localVarResponseHttpContentType) ==
                    std::string::npos) {
                    throw ApiException(
                        500,
                        utility::conversions::to_string_t(
                            "error calling unity3dGetutxosforaddressGet: unexpected "
                            "response type: ") +
                            localVarContentType,
                        std::make_shared<std::stringstream>(
                            localVarResponse.extract_utf8string(true).get()));
                }
            }

            return localVarResponse.extract_string();
        })
        .then([=](utility::string_t localVarResponse) {
            std::shared_ptr<GetUTXOsResponseModel> localVarResult(
                new GetUTXOsResponseModel());

            if (localVarResponseHttpContentType ==
                utility::conversions::to_string_t("application/json")) {
                web::json::value localVarJson =
                    web::json::value::parse(localVarResponse);

                ModelBase::fromJson(localVarJson, localVarResult);
            }
            // else if(localVarResponseHttpContentType ==
            // utility::conversions::to_string_t("multipart/form-data"))
            // {
            // TODO multipart response parsing
            // }
            else {
                throw ApiException(500,
                                   utility::conversions::to_string_t(
                                       "error calling unity3dGetutxosforaddressGet: "
                                       "unsupported response type"));
            }

            return localVarResult;
        });
}
pplx::task<std::shared_ptr<ILocalExecutionResult>>
UnrealApi::unity3dLocalCallPost(
    boost::optional<std::shared_ptr<LocalCallContractRequest>>
        localCallContractRequest) const
{
    std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
        m_ApiClient->getConfiguration());
    utility::string_t localVarPath =
        utility::conversions::to_string_t("/Unity3d/local-call");

    std::map<utility::string_t, utility::string_t> localVarQueryParams;
    std::map<utility::string_t, utility::string_t> localVarHeaderParams(
        localVarApiConfiguration->getDefaultHeaders());
    std::map<utility::string_t, utility::string_t> localVarFormParams;
    std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

    std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("text/plain"));
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("application/json"));
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("text/json"));

    utility::string_t localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.size() == 0) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // JSON
    else if (localVarResponseHttpContentTypes.find(
                 utility::conversions::to_string_t("application/json")) !=
             localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // multipart formdata
    else if (localVarResponseHttpContentTypes.find(
                 utility::conversions::to_string_t("multipart/form-data")) !=
             localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("multipart/form-data");
    } else {
        throw ApiException(400, utility::conversions::to_string_t(
                                    "UnrealApi->unity3dLocalCallPost does not "
                                    "produce any supported media type"));
    }

    localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
        localVarResponseHttpContentType;

    std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;
    localVarConsumeHttpContentTypes.insert(
        utility::conversions::to_string_t("application/json-patch+json"));
    localVarConsumeHttpContentTypes.insert(
        utility::conversions::to_string_t("application/json"));
    localVarConsumeHttpContentTypes.insert(
        utility::conversions::to_string_t("text/json"));
    localVarConsumeHttpContentTypes.insert(
        utility::conversions::to_string_t("application/_*+json"));

    std::shared_ptr<IHttpBody> localVarHttpBody;
    utility::string_t localVarRequestHttpContentType;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.size() == 0 ||
        localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
            "application/json")) != localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("application/json");
        web::json::value localVarJson;

        if (localCallContractRequest)
            localVarJson = ModelBase::toJson(*localCallContractRequest);

        localVarHttpBody = std::shared_ptr<IHttpBody>(new JsonBody(localVarJson));
    }
    // multipart formdata
    else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t("multipart/form-data")) !=
             localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("multipart/form-data");
        std::shared_ptr<MultipartFormData> localVarMultipart(new MultipartFormData);

        if (localCallContractRequest && (*localCallContractRequest).get()) {
            (*localCallContractRequest)
                ->toMultipart(localVarMultipart, utility::conversions::to_string_t(
                                                     "localCallContractRequest"));
        }

        localVarHttpBody = localVarMultipart;
        localVarRequestHttpContentType +=
            utility::conversions::to_string_t("; boundary=") +
            localVarMultipart->getBoundary();
    } else if (localVarConsumeHttpContentTypes.find(
                   utility::conversions::to_string_t(
                       "application/x-www-form-urlencoded")) !=
               localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("application/x-www-form-urlencoded");
    } else {
        throw ApiException(415, utility::conversions::to_string_t(
                                    "UnrealApi->unity3dLocalCallPost does not "
                                    "consume any supported media type"));
    }

    return m_ApiClient
        ->callApi(localVarPath, utility::conversions::to_string_t("POST"),
                  localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                  localVarFormParams, localVarFileParams,
                  localVarRequestHttpContentType)
        .then([=](web::http::http_response localVarResponse) {
            if (m_ApiClient->getResponseHandler()) {
                m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                                  localVarResponse.headers());
            }

            // 1xx - informational : OK
            // 2xx - successful       : OK
            // 3xx - redirection   : OK
            // 4xx - client error  : not OK
            // 5xx - client error  : not OK
            if (localVarResponse.status_code() >= 400) {
                throw ApiException(
                    localVarResponse.status_code(),
                    utility::conversions::to_string_t(
                        "error calling unity3dLocalCallPost: ") +
                        localVarResponse.reason_phrase(),
                    std::make_shared<std::stringstream>(
                        localVarResponse.extract_utf8string(true).get()));
            }

            // check response content type
            if (localVarResponse.headers().has(
                    utility::conversions::to_string_t("Content-Type"))) {
                utility::string_t localVarContentType =
                    localVarResponse
                        .headers()[utility::conversions::to_string_t("Content-Type")];
                if (localVarContentType.find(localVarResponseHttpContentType) ==
                    std::string::npos) {
                    throw ApiException(
                        500,
                        utility::conversions::to_string_t(
                            "error calling unity3dLocalCallPost: unexpected response "
                            "type: ") +
                            localVarContentType,
                        std::make_shared<std::stringstream>(
                            localVarResponse.extract_utf8string(true).get()));
                }
            }

            return localVarResponse.extract_string();
        })
        .then([=](utility::string_t localVarResponse) {
            std::shared_ptr<ILocalExecutionResult> localVarResult(
                new ILocalExecutionResult());

            if (localVarResponseHttpContentType ==
                utility::conversions::to_string_t("application/json")) {
                web::json::value localVarJson =
                    web::json::value::parse(localVarResponse);

                ModelBase::fromJson(localVarJson, localVarResult);
            }
            // else if(localVarResponseHttpContentType ==
            // utility::conversions::to_string_t("multipart/form-data"))
            // {
            // TODO multipart response parsing
            // }
            else {
                throw ApiException(500, utility::conversions::to_string_t(
                                            "error calling unity3dLocalCallPost: "
                                            "unsupported response type"));
            }

            return localVarResult;
        });
}
pplx::task<std::shared_ptr<ReceiptResponse>>
UnrealApi::unity3dReceiptGet(boost::optional<utility::string_t> txHash) const
{
    std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
        m_ApiClient->getConfiguration());
    utility::string_t localVarPath =
        utility::conversions::to_string_t("/Unity3d/receipt");

    std::map<utility::string_t, utility::string_t> localVarQueryParams;
    std::map<utility::string_t, utility::string_t> localVarHeaderParams(
        localVarApiConfiguration->getDefaultHeaders());
    std::map<utility::string_t, utility::string_t> localVarFormParams;
    std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

    std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("text/plain"));
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("application/json"));
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("text/json"));

    utility::string_t localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.size() == 0) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // JSON
    else if (localVarResponseHttpContentTypes.find(
                 utility::conversions::to_string_t("application/json")) !=
             localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // multipart formdata
    else if (localVarResponseHttpContentTypes.find(
                 utility::conversions::to_string_t("multipart/form-data")) !=
             localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("multipart/form-data");
    } else {
        throw ApiException(400, utility::conversions::to_string_t(
                                    "UnrealApi->unity3dReceiptGet does not produce "
                                    "any supported media type"));
    }

    localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
        localVarResponseHttpContentType;

    std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;

    if (txHash) {
        localVarQueryParams[utility::conversions::to_string_t("txHash")] =
            ApiClient::parameterToString(*txHash);
    }

    std::shared_ptr<IHttpBody> localVarHttpBody;
    utility::string_t localVarRequestHttpContentType;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.size() == 0 ||
        localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
            "application/json")) != localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // multipart formdata
    else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t("multipart/form-data")) !=
             localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("multipart/form-data");
    } else if (localVarConsumeHttpContentTypes.find(
                   utility::conversions::to_string_t(
                       "application/x-www-form-urlencoded")) !=
               localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("application/x-www-form-urlencoded");
    } else {
        throw ApiException(415, utility::conversions::to_string_t(
                                    "UnrealApi->unity3dReceiptGet does not consume "
                                    "any supported media type"));
    }

    return m_ApiClient
        ->callApi(localVarPath, utility::conversions::to_string_t("GET"),
                  localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                  localVarFormParams, localVarFileParams,
                  localVarRequestHttpContentType)
        .then([=](web::http::http_response localVarResponse) {
            if (m_ApiClient->getResponseHandler()) {
                m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                                  localVarResponse.headers());
            }

            // 1xx - informational : OK
            // 2xx - successful       : OK
            // 3xx - redirection   : OK
            // 4xx - client error  : not OK
            // 5xx - client error  : not OK
            if (localVarResponse.status_code() >= 400) {
                throw ApiException(
                    localVarResponse.status_code(),
                    utility::conversions::to_string_t(
                        "error calling unity3dReceiptGet: ") +
                        localVarResponse.reason_phrase(),
                    std::make_shared<std::stringstream>(
                        localVarResponse.extract_utf8string(true).get()));
            }

            // check response content type
            if (localVarResponse.headers().has(
                    utility::conversions::to_string_t("Content-Type"))) {
                utility::string_t localVarContentType =
                    localVarResponse
                        .headers()[utility::conversions::to_string_t("Content-Type")];
                if (localVarContentType.find(localVarResponseHttpContentType) ==
                    std::string::npos) {
                    throw ApiException(
                        500,
                        utility::conversions::to_string_t(
                            "error calling unity3dReceiptGet: unexpected response "
                            "type: ") +
                            localVarContentType,
                        std::make_shared<std::stringstream>(
                            localVarResponse.extract_utf8string(true).get()));
                }
            }

            return localVarResponse.extract_string();
        })
        .then([=](utility::string_t localVarResponse) {
            std::shared_ptr<ReceiptResponse> localVarResult(new ReceiptResponse());

            if (localVarResponseHttpContentType ==
                utility::conversions::to_string_t("application/json")) {
                web::json::value localVarJson =
                    web::json::value::parse(localVarResponse);

                ModelBase::fromJson(localVarJson, localVarResult);
            }
            // else if(localVarResponseHttpContentType ==
            // utility::conversions::to_string_t("multipart/form-data"))
            // {
            // TODO multipart response parsing
            // }
            else {
                throw ApiException(500, utility::conversions::to_string_t(
                                            "error calling unity3dReceiptGet: "
                                            "unsupported response type"));
            }

            return localVarResult;
        });
}
pplx::task<std::vector<std::shared_ptr<ReceiptResponse>>>
UnrealApi::unity3dReceiptSearchGet(
    boost::optional<utility::string_t> contractAddress,
    boost::optional<utility::string_t> eventName,
    boost::optional<std::vector<utility::string_t>> topics,
    boost::optional<int32_t> fromBlock,
    boost::optional<int32_t> toBlock) const
{
    std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
        m_ApiClient->getConfiguration());
    utility::string_t localVarPath =
        utility::conversions::to_string_t("/Unity3d/receipt-search");

    std::map<utility::string_t, utility::string_t> localVarQueryParams;
    std::map<utility::string_t, utility::string_t> localVarHeaderParams(
        localVarApiConfiguration->getDefaultHeaders());
    std::map<utility::string_t, utility::string_t> localVarFormParams;
    std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

    std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("text/plain"));
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("application/json"));
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("text/json"));

    utility::string_t localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.size() == 0) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // JSON
    else if (localVarResponseHttpContentTypes.find(
                 utility::conversions::to_string_t("application/json")) !=
             localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // multipart formdata
    else if (localVarResponseHttpContentTypes.find(
                 utility::conversions::to_string_t("multipart/form-data")) !=
             localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("multipart/form-data");
    } else {
        throw ApiException(400, utility::conversions::to_string_t(
                                    "UnrealApi->unity3dReceiptSearchGet does not "
                                    "produce any supported media type"));
    }

    localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
        localVarResponseHttpContentType;

    std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;

    if (contractAddress) {
        localVarQueryParams[utility::conversions::to_string_t("contractAddress")] =
            ApiClient::parameterToString(*contractAddress);
    }
    if (eventName) {
        localVarQueryParams[utility::conversions::to_string_t("eventName")] =
            ApiClient::parameterToString(*eventName);
    }
    if (topics) {
        localVarQueryParams[utility::conversions::to_string_t("topics")] =
            ApiClient::parameterToString(*topics);
    }
    if (fromBlock) {
        localVarQueryParams[utility::conversions::to_string_t("fromBlock")] =
            ApiClient::parameterToString(*fromBlock);
    }
    if (toBlock) {
        localVarQueryParams[utility::conversions::to_string_t("toBlock")] =
            ApiClient::parameterToString(*toBlock);
    }

    std::shared_ptr<IHttpBody> localVarHttpBody;
    utility::string_t localVarRequestHttpContentType;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.size() == 0 ||
        localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
            "application/json")) != localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // multipart formdata
    else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t("multipart/form-data")) !=
             localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("multipart/form-data");
    } else if (localVarConsumeHttpContentTypes.find(
                   utility::conversions::to_string_t(
                       "application/x-www-form-urlencoded")) !=
               localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("application/x-www-form-urlencoded");
    } else {
        throw ApiException(415, utility::conversions::to_string_t(
                                    "UnrealApi->unity3dReceiptSearchGet does not "
                                    "consume any supported media type"));
    }

    return m_ApiClient
        ->callApi(localVarPath, utility::conversions::to_string_t("GET"),
                  localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                  localVarFormParams, localVarFileParams,
                  localVarRequestHttpContentType)
        .then([=](web::http::http_response localVarResponse) {
            if (m_ApiClient->getResponseHandler()) {
                m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                                  localVarResponse.headers());
            }

            // 1xx - informational : OK
            // 2xx - successful       : OK
            // 3xx - redirection   : OK
            // 4xx - client error  : not OK
            // 5xx - client error  : not OK
            if (localVarResponse.status_code() >= 400) {
                throw ApiException(
                    localVarResponse.status_code(),
                    utility::conversions::to_string_t(
                        "error calling unity3dReceiptSearchGet: ") +
                        localVarResponse.reason_phrase(),
                    std::make_shared<std::stringstream>(
                        localVarResponse.extract_utf8string(true).get()));
            }

            // check response content type
            if (localVarResponse.headers().has(
                    utility::conversions::to_string_t("Content-Type"))) {
                utility::string_t localVarContentType =
                    localVarResponse
                        .headers()[utility::conversions::to_string_t("Content-Type")];
                if (localVarContentType.find(localVarResponseHttpContentType) ==
                    std::string::npos) {
                    throw ApiException(
                        500,
                        utility::conversions::to_string_t(
                            "error calling unity3dReceiptSearchGet: unexpected "
                            "response type: ") +
                            localVarContentType,
                        std::make_shared<std::stringstream>(
                            localVarResponse.extract_utf8string(true).get()));
                }
            }

            return localVarResponse.extract_string();
        })
        .then([=](utility::string_t localVarResponse) {
            std::vector<std::shared_ptr<ReceiptResponse>> localVarResult;

            if (localVarResponseHttpContentType ==
                utility::conversions::to_string_t("application/json")) {
                web::json::value localVarJson =
                    web::json::value::parse(localVarResponse);
                for (auto& localVarItem : localVarJson.as_array()) {
                    std::shared_ptr<ReceiptResponse> localVarItemObj;
                    ModelBase::fromJson(localVarItem, localVarItemObj);
                    localVarResult.push_back(localVarItemObj);
                }
            }
            // else if(localVarResponseHttpContentType ==
            // utility::conversions::to_string_t("multipart/form-data"))
            // {
            // TODO multipart response parsing
            // }
            else {
                throw ApiException(500, utility::conversions::to_string_t(
                                            "error calling unity3dReceiptSearchGet: "
                                            "unsupported response type"));
            }

            return localVarResult;
        });
}
pplx::task<void> UnrealApi::unity3dReindexAllContractsGet() const
{
    std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
        m_ApiClient->getConfiguration());
    utility::string_t localVarPath =
        utility::conversions::to_string_t("/Unity3d/reindex-all-contracts");

    std::map<utility::string_t, utility::string_t> localVarQueryParams;
    std::map<utility::string_t, utility::string_t> localVarHeaderParams(
        localVarApiConfiguration->getDefaultHeaders());
    std::map<utility::string_t, utility::string_t> localVarFormParams;
    std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

    std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("text/plain"));
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("application/json"));
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("text/json"));

    utility::string_t localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.size() == 0) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // JSON
    else if (localVarResponseHttpContentTypes.find(
                 utility::conversions::to_string_t("application/json")) !=
             localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // multipart formdata
    else if (localVarResponseHttpContentTypes.find(
                 utility::conversions::to_string_t("multipart/form-data")) !=
             localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("multipart/form-data");
    } else {
        throw ApiException(400, utility::conversions::to_string_t(
                                    "UnrealApi->unity3dReindexAllContractsGet does "
                                    "not produce any supported media type"));
    }

    localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
        localVarResponseHttpContentType;

    std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;

    std::shared_ptr<IHttpBody> localVarHttpBody;
    utility::string_t localVarRequestHttpContentType;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.size() == 0 ||
        localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
            "application/json")) != localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // multipart formdata
    else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t("multipart/form-data")) !=
             localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("multipart/form-data");
    } else if (localVarConsumeHttpContentTypes.find(
                   utility::conversions::to_string_t(
                       "application/x-www-form-urlencoded")) !=
               localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("application/x-www-form-urlencoded");
    } else {
        throw ApiException(415, utility::conversions::to_string_t(
                                    "UnrealApi->unity3dReindexAllContractsGet does "
                                    "not consume any supported media type"));
    }

    return m_ApiClient
        ->callApi(localVarPath, utility::conversions::to_string_t("GET"),
                  localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                  localVarFormParams, localVarFileParams,
                  localVarRequestHttpContentType)
        .then([=](web::http::http_response localVarResponse) {
            if (m_ApiClient->getResponseHandler()) {
                m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                                  localVarResponse.headers());
            }

            // 1xx - informational : OK
            // 2xx - successful       : OK
            // 3xx - redirection   : OK
            // 4xx - client error  : not OK
            // 5xx - client error  : not OK
            if (localVarResponse.status_code() >= 400) {
                throw ApiException(
                    localVarResponse.status_code(),
                    utility::conversions::to_string_t(
                        "error calling unity3dReindexAllContractsGet: ") +
                        localVarResponse.reason_phrase(),
                    std::make_shared<std::stringstream>(
                        localVarResponse.extract_utf8string(true).get()));
            }

            // check response content type
            if (localVarResponse.headers().has(
                    utility::conversions::to_string_t("Content-Type"))) {
                utility::string_t localVarContentType =
                    localVarResponse
                        .headers()[utility::conversions::to_string_t("Content-Type")];
                if (localVarContentType.find(localVarResponseHttpContentType) ==
                    std::string::npos) {
                    throw ApiException(
                        500,
                        utility::conversions::to_string_t(
                            "error calling unity3dReindexAllContractsGet: unexpected "
                            "response type: ") +
                            localVarContentType,
                        std::make_shared<std::stringstream>(
                            localVarResponse.extract_utf8string(true).get()));
                }
            }

            return localVarResponse.extract_string();
        })
        .then([=](utility::string_t localVarResponse) { return void(); });
}
pplx::task<std::shared_ptr<WalletSendTransactionModel>>
UnrealApi::unity3dSendTransactionPost(
    boost::optional<std::shared_ptr<SendTransactionRequest>>
        sendTransactionRequest) const
{
    std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
        m_ApiClient->getConfiguration());
    utility::string_t localVarPath =
        utility::conversions::to_string_t("/Unity3d/send-transaction");

    std::map<utility::string_t, utility::string_t> localVarQueryParams;
    std::map<utility::string_t, utility::string_t> localVarHeaderParams(
        localVarApiConfiguration->getDefaultHeaders());
    std::map<utility::string_t, utility::string_t> localVarFormParams;
    std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

    std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("text/plain"));
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("application/json"));
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("text/json"));

    utility::string_t localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.size() == 0) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // JSON
    else if (localVarResponseHttpContentTypes.find(
                 utility::conversions::to_string_t("application/json")) !=
             localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // multipart formdata
    else if (localVarResponseHttpContentTypes.find(
                 utility::conversions::to_string_t("multipart/form-data")) !=
             localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("multipart/form-data");
    } else {
        throw ApiException(400, utility::conversions::to_string_t(
                                    "UnrealApi->unity3dSendTransactionPost does "
                                    "not produce any supported media type"));
    }

    localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
        localVarResponseHttpContentType;

    std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;
    localVarConsumeHttpContentTypes.insert(
        utility::conversions::to_string_t("application/json-patch+json"));
    localVarConsumeHttpContentTypes.insert(
        utility::conversions::to_string_t("application/json"));
    localVarConsumeHttpContentTypes.insert(
        utility::conversions::to_string_t("text/json"));
    localVarConsumeHttpContentTypes.insert(
        utility::conversions::to_string_t("application/_*+json"));

    std::shared_ptr<IHttpBody> localVarHttpBody;
    utility::string_t localVarRequestHttpContentType;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.size() == 0 ||
        localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
            "application/json")) != localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("application/json");
        web::json::value localVarJson;

        if (sendTransactionRequest)
            localVarJson = ModelBase::toJson(*sendTransactionRequest);

        localVarHttpBody = std::shared_ptr<IHttpBody>(new JsonBody(localVarJson));
    }
    // multipart formdata
    else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t("multipart/form-data")) !=
             localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("multipart/form-data");
        std::shared_ptr<MultipartFormData> localVarMultipart(new MultipartFormData);

        if (sendTransactionRequest && (*sendTransactionRequest).get()) {
            (*sendTransactionRequest)
                ->toMultipart(localVarMultipart, utility::conversions::to_string_t(
                                                     "sendTransactionRequest"));
        }

        localVarHttpBody = localVarMultipart;
        localVarRequestHttpContentType +=
            utility::conversions::to_string_t("; boundary=") +
            localVarMultipart->getBoundary();
    } else if (localVarConsumeHttpContentTypes.find(
                   utility::conversions::to_string_t(
                       "application/x-www-form-urlencoded")) !=
               localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("application/x-www-form-urlencoded");
    } else {
        throw ApiException(415, utility::conversions::to_string_t(
                                    "UnrealApi->unity3dSendTransactionPost does "
                                    "not consume any supported media type"));
    }

    return m_ApiClient
        ->callApi(localVarPath, utility::conversions::to_string_t("POST"),
                  localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                  localVarFormParams, localVarFileParams,
                  localVarRequestHttpContentType)
        .then([=](web::http::http_response localVarResponse) {
            if (m_ApiClient->getResponseHandler()) {
                m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                                  localVarResponse.headers());
            }

            // 1xx - informational : OK
            // 2xx - successful       : OK
            // 3xx - redirection   : OK
            // 4xx - client error  : not OK
            // 5xx - client error  : not OK
            if (localVarResponse.status_code() >= 400) {
                throw ApiException(
                    localVarResponse.status_code(),
                    utility::conversions::to_string_t(
                        "error calling unity3dSendTransactionPost: ") +
                        localVarResponse.reason_phrase(),
                    std::make_shared<std::stringstream>(
                        localVarResponse.extract_utf8string(true).get()));
            }

            // check response content type
            if (localVarResponse.headers().has(
                    utility::conversions::to_string_t("Content-Type"))) {
                utility::string_t localVarContentType =
                    localVarResponse
                        .headers()[utility::conversions::to_string_t("Content-Type")];
                if (localVarContentType.find(localVarResponseHttpContentType) ==
                    std::string::npos) {
                    throw ApiException(
                        500,
                        utility::conversions::to_string_t(
                            "error calling unity3dSendTransactionPost: unexpected "
                            "response type: ") +
                            localVarContentType,
                        std::make_shared<std::stringstream>(
                            localVarResponse.extract_utf8string(true).get()));
                }
            }

            return localVarResponse.extract_string();
        })
        .then([=](utility::string_t localVarResponse) {
            std::shared_ptr<WalletSendTransactionModel> localVarResult(
                new WalletSendTransactionModel());

            if (localVarResponseHttpContentType ==
                utility::conversions::to_string_t("application/json")) {
                web::json::value localVarJson =
                    web::json::value::parse(localVarResponse);

                ModelBase::fromJson(localVarJson, localVarResult);
            }
            // else if(localVarResponseHttpContentType ==
            // utility::conversions::to_string_t("multipart/form-data"))
            // {
            // TODO multipart response parsing
            // }
            else {
                throw ApiException(500,
                                   utility::conversions::to_string_t(
                                       "error calling unity3dSendTransactionPost: "
                                       "unsupported response type"));
            }

            return localVarResult;
        });
}
pplx::task<std::shared_ptr<TipModel>> UnrealApi::unity3dTipGet() const
{
    std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
        m_ApiClient->getConfiguration());
    utility::string_t localVarPath =
        utility::conversions::to_string_t("/Unity3d/tip");

    std::map<utility::string_t, utility::string_t> localVarQueryParams;
    std::map<utility::string_t, utility::string_t> localVarHeaderParams(
        localVarApiConfiguration->getDefaultHeaders());
    std::map<utility::string_t, utility::string_t> localVarFormParams;
    std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

    std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("text/plain"));
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("application/json"));
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("text/json"));

    utility::string_t localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.size() == 0) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // JSON
    else if (localVarResponseHttpContentTypes.find(
                 utility::conversions::to_string_t("application/json")) !=
             localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // multipart formdata
    else if (localVarResponseHttpContentTypes.find(
                 utility::conversions::to_string_t("multipart/form-data")) !=
             localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("multipart/form-data");
    } else {
        throw ApiException(400, utility::conversions::to_string_t(
                                    "UnrealApi->unity3dTipGet does not produce any "
                                    "supported media type"));
    }

    localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
        localVarResponseHttpContentType;

    std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;

    std::shared_ptr<IHttpBody> localVarHttpBody;
    utility::string_t localVarRequestHttpContentType;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.size() == 0 ||
        localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
            "application/json")) != localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // multipart formdata
    else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t("multipart/form-data")) !=
             localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("multipart/form-data");
    } else if (localVarConsumeHttpContentTypes.find(
                   utility::conversions::to_string_t(
                       "application/x-www-form-urlencoded")) !=
               localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("application/x-www-form-urlencoded");
    } else {
        throw ApiException(415, utility::conversions::to_string_t(
                                    "UnrealApi->unity3dTipGet does not consume any "
                                    "supported media type"));
    }

    return m_ApiClient
        ->callApi(localVarPath, utility::conversions::to_string_t("GET"),
                  localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                  localVarFormParams, localVarFileParams,
                  localVarRequestHttpContentType)
        .then([=](web::http::http_response localVarResponse) {
            if (m_ApiClient->getResponseHandler()) {
                m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                                  localVarResponse.headers());
            }

            // 1xx - informational : OK
            // 2xx - successful       : OK
            // 3xx - redirection   : OK
            // 4xx - client error  : not OK
            // 5xx - client error  : not OK
            if (localVarResponse.status_code() >= 400) {
                throw ApiException(
                    localVarResponse.status_code(),
                    utility::conversions::to_string_t(
                        "error calling unity3dTipGet: ") +
                        localVarResponse.reason_phrase(),
                    std::make_shared<std::stringstream>(
                        localVarResponse.extract_utf8string(true).get()));
            }

            // check response content type
            if (localVarResponse.headers().has(
                    utility::conversions::to_string_t("Content-Type"))) {
                utility::string_t localVarContentType =
                    localVarResponse
                        .headers()[utility::conversions::to_string_t("Content-Type")];
                if (localVarContentType.find(localVarResponseHttpContentType) ==
                    std::string::npos) {
                    throw ApiException(
                        500,
                        utility::conversions::to_string_t(
                            "error calling unity3dTipGet: unexpected response type: ") +
                            localVarContentType,
                        std::make_shared<std::stringstream>(
                            localVarResponse.extract_utf8string(true).get()));
                }
            }

            return localVarResponse.extract_string();
        })
        .then([=](utility::string_t localVarResponse) {
            std::shared_ptr<TipModel> localVarResult(new TipModel());

            if (localVarResponseHttpContentType ==
                utility::conversions::to_string_t("application/json")) {
                web::json::value localVarJson =
                    web::json::value::parse(localVarResponse);

                ModelBase::fromJson(localVarJson, localVarResult);
            }
            // else if(localVarResponseHttpContentType ==
            // utility::conversions::to_string_t("multipart/form-data"))
            // {
            // TODO multipart response parsing
            // }
            else {
                throw ApiException(
                    500,
                    utility::conversions::to_string_t(
                        "error calling unity3dTipGet: unsupported response type"));
            }

            return localVarResult;
        });
}
pplx::task<void> UnrealApi::unity3dUnwatchNftContractGet(
    boost::optional<utility::string_t> contractAddress) const
{
    std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
        m_ApiClient->getConfiguration());
    utility::string_t localVarPath =
        utility::conversions::to_string_t("/Unity3d/unwatch-nft-contract");

    std::map<utility::string_t, utility::string_t> localVarQueryParams;
    std::map<utility::string_t, utility::string_t> localVarHeaderParams(
        localVarApiConfiguration->getDefaultHeaders());
    std::map<utility::string_t, utility::string_t> localVarFormParams;
    std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

    std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("text/plain"));
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("application/json"));
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("text/json"));

    utility::string_t localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.size() == 0) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // JSON
    else if (localVarResponseHttpContentTypes.find(
                 utility::conversions::to_string_t("application/json")) !=
             localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // multipart formdata
    else if (localVarResponseHttpContentTypes.find(
                 utility::conversions::to_string_t("multipart/form-data")) !=
             localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("multipart/form-data");
    } else {
        throw ApiException(400, utility::conversions::to_string_t(
                                    "UnrealApi->unity3dUnwatchNftContractGet does "
                                    "not produce any supported media type"));
    }

    localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
        localVarResponseHttpContentType;

    std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;

    if (contractAddress) {
        localVarQueryParams[utility::conversions::to_string_t("contractAddress")] =
            ApiClient::parameterToString(*contractAddress);
    }

    std::shared_ptr<IHttpBody> localVarHttpBody;
    utility::string_t localVarRequestHttpContentType;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.size() == 0 ||
        localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
            "application/json")) != localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // multipart formdata
    else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t("multipart/form-data")) !=
             localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("multipart/form-data");
    } else if (localVarConsumeHttpContentTypes.find(
                   utility::conversions::to_string_t(
                       "application/x-www-form-urlencoded")) !=
               localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("application/x-www-form-urlencoded");
    } else {
        throw ApiException(415, utility::conversions::to_string_t(
                                    "UnrealApi->unity3dUnwatchNftContractGet does "
                                    "not consume any supported media type"));
    }

    return m_ApiClient
        ->callApi(localVarPath, utility::conversions::to_string_t("GET"),
                  localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                  localVarFormParams, localVarFileParams,
                  localVarRequestHttpContentType)
        .then([=](web::http::http_response localVarResponse) {
            if (m_ApiClient->getResponseHandler()) {
                m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                                  localVarResponse.headers());
            }

            // 1xx - informational : OK
            // 2xx - successful       : OK
            // 3xx - redirection   : OK
            // 4xx - client error  : not OK
            // 5xx - client error  : not OK
            if (localVarResponse.status_code() >= 400) {
                throw ApiException(
                    localVarResponse.status_code(),
                    utility::conversions::to_string_t(
                        "error calling unity3dUnwatchNftContractGet: ") +
                        localVarResponse.reason_phrase(),
                    std::make_shared<std::stringstream>(
                        localVarResponse.extract_utf8string(true).get()));
            }

            // check response content type
            if (localVarResponse.headers().has(
                    utility::conversions::to_string_t("Content-Type"))) {
                utility::string_t localVarContentType =
                    localVarResponse
                        .headers()[utility::conversions::to_string_t("Content-Type")];
                if (localVarContentType.find(localVarResponseHttpContentType) ==
                    std::string::npos) {
                    throw ApiException(
                        500,
                        utility::conversions::to_string_t(
                            "error calling unity3dUnwatchNftContractGet: unexpected "
                            "response type: ") +
                            localVarContentType,
                        std::make_shared<std::stringstream>(
                            localVarResponse.extract_utf8string(true).get()));
                }
            }

            return localVarResponse.extract_string();
        })
        .then([=](utility::string_t localVarResponse) { return void(); });
}
pplx::task<std::shared_ptr<ValidatedAddress>>
UnrealApi::unity3dValidateaddressGet(
    boost::optional<utility::string_t> address) const
{
    std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
        m_ApiClient->getConfiguration());
    utility::string_t localVarPath =
        utility::conversions::to_string_t("/Unity3d/validateaddress");

    std::map<utility::string_t, utility::string_t> localVarQueryParams;
    std::map<utility::string_t, utility::string_t> localVarHeaderParams(
        localVarApiConfiguration->getDefaultHeaders());
    std::map<utility::string_t, utility::string_t> localVarFormParams;
    std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

    std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("text/plain"));
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("application/json"));
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("text/json"));

    utility::string_t localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.size() == 0) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // JSON
    else if (localVarResponseHttpContentTypes.find(
                 utility::conversions::to_string_t("application/json")) !=
             localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // multipart formdata
    else if (localVarResponseHttpContentTypes.find(
                 utility::conversions::to_string_t("multipart/form-data")) !=
             localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("multipart/form-data");
    } else {
        throw ApiException(400, utility::conversions::to_string_t(
                                    "UnrealApi->unity3dValidateaddressGet does not "
                                    "produce any supported media type"));
    }

    localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
        localVarResponseHttpContentType;

    std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;

    if (address) {
        localVarQueryParams[utility::conversions::to_string_t("address")] =
            ApiClient::parameterToString(*address);
    }

    std::shared_ptr<IHttpBody> localVarHttpBody;
    utility::string_t localVarRequestHttpContentType;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.size() == 0 ||
        localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
            "application/json")) != localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // multipart formdata
    else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t("multipart/form-data")) !=
             localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("multipart/form-data");
    } else if (localVarConsumeHttpContentTypes.find(
                   utility::conversions::to_string_t(
                       "application/x-www-form-urlencoded")) !=
               localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("application/x-www-form-urlencoded");
    } else {
        throw ApiException(415, utility::conversions::to_string_t(
                                    "UnrealApi->unity3dValidateaddressGet does not "
                                    "consume any supported media type"));
    }

    return m_ApiClient
        ->callApi(localVarPath, utility::conversions::to_string_t("GET"),
                  localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                  localVarFormParams, localVarFileParams,
                  localVarRequestHttpContentType)
        .then([=](web::http::http_response localVarResponse) {
            if (m_ApiClient->getResponseHandler()) {
                m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                                  localVarResponse.headers());
            }

            // 1xx - informational : OK
            // 2xx - successful       : OK
            // 3xx - redirection   : OK
            // 4xx - client error  : not OK
            // 5xx - client error  : not OK
            if (localVarResponse.status_code() >= 400) {
                throw ApiException(
                    localVarResponse.status_code(),
                    utility::conversions::to_string_t(
                        "error calling unity3dValidateaddressGet: ") +
                        localVarResponse.reason_phrase(),
                    std::make_shared<std::stringstream>(
                        localVarResponse.extract_utf8string(true).get()));
            }

            // check response content type
            if (localVarResponse.headers().has(
                    utility::conversions::to_string_t("Content-Type"))) {
                utility::string_t localVarContentType =
                    localVarResponse
                        .headers()[utility::conversions::to_string_t("Content-Type")];
                if (localVarContentType.find(localVarResponseHttpContentType) ==
                    std::string::npos) {
                    throw ApiException(
                        500,
                        utility::conversions::to_string_t(
                            "error calling unity3dValidateaddressGet: unexpected "
                            "response type: ") +
                            localVarContentType,
                        std::make_shared<std::stringstream>(
                            localVarResponse.extract_utf8string(true).get()));
                }
            }

            return localVarResponse.extract_string();
        })
        .then([=](utility::string_t localVarResponse) {
            std::shared_ptr<ValidatedAddress> localVarResult(
                new ValidatedAddress());

            if (localVarResponseHttpContentType ==
                utility::conversions::to_string_t("application/json")) {
                web::json::value localVarJson =
                    web::json::value::parse(localVarResponse);

                ModelBase::fromJson(localVarJson, localVarResult);
            }
            // else if(localVarResponseHttpContentType ==
            // utility::conversions::to_string_t("multipart/form-data"))
            // {
            // TODO multipart response parsing
            // }
            else {
                throw ApiException(500,
                                   utility::conversions::to_string_t(
                                       "error calling unity3dValidateaddressGet: "
                                       "unsupported response type"));
            }

            return localVarResult;
        });
}
pplx::task<void> UnrealApi::unity3dWatchNftContractGet(
    boost::optional<utility::string_t> contractAddress) const
{
    std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
        m_ApiClient->getConfiguration());
    utility::string_t localVarPath =
        utility::conversions::to_string_t("/Unity3d/watch-nft-contract");

    std::map<utility::string_t, utility::string_t> localVarQueryParams;
    std::map<utility::string_t, utility::string_t> localVarHeaderParams(
        localVarApiConfiguration->getDefaultHeaders());
    std::map<utility::string_t, utility::string_t> localVarFormParams;
    std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

    std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("text/plain"));
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("application/json"));
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("text/json"));

    utility::string_t localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.size() == 0) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // JSON
    else if (localVarResponseHttpContentTypes.find(
                 utility::conversions::to_string_t("application/json")) !=
             localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // multipart formdata
    else if (localVarResponseHttpContentTypes.find(
                 utility::conversions::to_string_t("multipart/form-data")) !=
             localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("multipart/form-data");
    } else {
        throw ApiException(400, utility::conversions::to_string_t(
                                    "UnrealApi->unity3dWatchNftContractGet does "
                                    "not produce any supported media type"));
    }

    localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
        localVarResponseHttpContentType;

    std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;

    if (contractAddress) {
        localVarQueryParams[utility::conversions::to_string_t("contractAddress")] =
            ApiClient::parameterToString(*contractAddress);
    }

    std::shared_ptr<IHttpBody> localVarHttpBody;
    utility::string_t localVarRequestHttpContentType;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.size() == 0 ||
        localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
            "application/json")) != localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // multipart formdata
    else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t("multipart/form-data")) !=
             localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("multipart/form-data");
    } else if (localVarConsumeHttpContentTypes.find(
                   utility::conversions::to_string_t(
                       "application/x-www-form-urlencoded")) !=
               localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("application/x-www-form-urlencoded");
    } else {
        throw ApiException(415, utility::conversions::to_string_t(
                                    "UnrealApi->unity3dWatchNftContractGet does "
                                    "not consume any supported media type"));
    }

    return m_ApiClient
        ->callApi(localVarPath, utility::conversions::to_string_t("GET"),
                  localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                  localVarFormParams, localVarFileParams,
                  localVarRequestHttpContentType)
        .then([=](web::http::http_response localVarResponse) {
            if (m_ApiClient->getResponseHandler()) {
                m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                                  localVarResponse.headers());
            }

            // 1xx - informational : OK
            // 2xx - successful       : OK
            // 3xx - redirection   : OK
            // 4xx - client error  : not OK
            // 5xx - client error  : not OK
            if (localVarResponse.status_code() >= 400) {
                throw ApiException(
                    localVarResponse.status_code(),
                    utility::conversions::to_string_t(
                        "error calling unity3dWatchNftContractGet: ") +
                        localVarResponse.reason_phrase(),
                    std::make_shared<std::stringstream>(
                        localVarResponse.extract_utf8string(true).get()));
            }

            // check response content type
            if (localVarResponse.headers().has(
                    utility::conversions::to_string_t("Content-Type"))) {
                utility::string_t localVarContentType =
                    localVarResponse
                        .headers()[utility::conversions::to_string_t("Content-Type")];
                if (localVarContentType.find(localVarResponseHttpContentType) ==
                    std::string::npos) {
                    throw ApiException(
                        500,
                        utility::conversions::to_string_t(
                            "error calling unity3dWatchNftContractGet: unexpected "
                            "response type: ") +
                            localVarContentType,
                        std::make_shared<std::stringstream>(
                            localVarResponse.extract_utf8string(true).get()));
                }
            }

            return localVarResponse.extract_string();
        })
        .then([=](utility::string_t localVarResponse) { return void(); });
}
pplx::task<void> UnrealApi::unity3dWatchNftContractsPost(
    boost::optional<std::vector<utility::string_t>> utilityStringT) const
{
    std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
        m_ApiClient->getConfiguration());
    utility::string_t localVarPath =
        utility::conversions::to_string_t("/Unity3d/watch-nft-contracts");

    std::map<utility::string_t, utility::string_t> localVarQueryParams;
    std::map<utility::string_t, utility::string_t> localVarHeaderParams(
        localVarApiConfiguration->getDefaultHeaders());
    std::map<utility::string_t, utility::string_t> localVarFormParams;
    std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

    std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("text/plain"));
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("application/json"));
    localVarResponseHttpContentTypes.insert(
        utility::conversions::to_string_t("text/json"));

    utility::string_t localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.size() == 0) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // JSON
    else if (localVarResponseHttpContentTypes.find(
                 utility::conversions::to_string_t("application/json")) !=
             localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("application/json");
    }
    // multipart formdata
    else if (localVarResponseHttpContentTypes.find(
                 utility::conversions::to_string_t("multipart/form-data")) !=
             localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType =
            utility::conversions::to_string_t("multipart/form-data");
    } else {
        throw ApiException(400, utility::conversions::to_string_t(
                                    "UnrealApi->unity3dWatchNftContractsPost does "
                                    "not produce any supported media type"));
    }

    localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
        localVarResponseHttpContentType;

    std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;
    localVarConsumeHttpContentTypes.insert(
        utility::conversions::to_string_t("application/json-patch+json"));
    localVarConsumeHttpContentTypes.insert(
        utility::conversions::to_string_t("application/json"));
    localVarConsumeHttpContentTypes.insert(
        utility::conversions::to_string_t("text/json"));
    localVarConsumeHttpContentTypes.insert(
        utility::conversions::to_string_t("application/_*+json"));

    std::shared_ptr<IHttpBody> localVarHttpBody;
    utility::string_t localVarRequestHttpContentType;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.size() == 0 ||
        localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
            "application/json")) != localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("application/json");
        web::json::value localVarJson;

        {
            std::vector<web::json::value> localVarJsonArray;
            for (auto& localVarItem : utilityStringT.get()) {
                localVarJsonArray.push_back(ModelBase::toJson(localVarItem));
            }
            localVarJson = web::json::value::array(localVarJsonArray);
        }

        localVarHttpBody = std::shared_ptr<IHttpBody>(new JsonBody(localVarJson));
    }
    // multipart formdata
    else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t("multipart/form-data")) !=
             localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("multipart/form-data");
        std::shared_ptr<MultipartFormData> localVarMultipart(new MultipartFormData);

        {
            std::vector<web::json::value> localVarJsonArray;
            for (auto& localVarItem : utilityStringT.get()) {
                localVarJsonArray.push_back(ModelBase::toJson(localVarItem));
            }
            localVarMultipart->add(ModelBase::toHttpContent(
                utility::conversions::to_string_t("utilityStringT"),
                localVarJsonArray,
                utility::conversions::to_string_t("application/json")));
        }

        localVarHttpBody = localVarMultipart;
        localVarRequestHttpContentType +=
            utility::conversions::to_string_t("; boundary=") +
            localVarMultipart->getBoundary();
    } else if (localVarConsumeHttpContentTypes.find(
                   utility::conversions::to_string_t(
                       "application/x-www-form-urlencoded")) !=
               localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType =
            utility::conversions::to_string_t("application/x-www-form-urlencoded");
    } else {
        throw ApiException(415, utility::conversions::to_string_t(
                                    "UnrealApi->unity3dWatchNftContractsPost does "
                                    "not consume any supported media type"));
    }

    return m_ApiClient
        ->callApi(localVarPath, utility::conversions::to_string_t("POST"),
                  localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                  localVarFormParams, localVarFileParams,
                  localVarRequestHttpContentType)
        .then([=](web::http::http_response localVarResponse) {
            if (m_ApiClient->getResponseHandler()) {
                m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                                  localVarResponse.headers());
            }

            // 1xx - informational : OK
            // 2xx - successful       : OK
            // 3xx - redirection   : OK
            // 4xx - client error  : not OK
            // 5xx - client error  : not OK
            if (localVarResponse.status_code() >= 400) {
                throw ApiException(
                    localVarResponse.status_code(),
                    utility::conversions::to_string_t(
                        "error calling unity3dWatchNftContractsPost: ") +
                        localVarResponse.reason_phrase(),
                    std::make_shared<std::stringstream>(
                        localVarResponse.extract_utf8string(true).get()));
            }

            // check response content type
            if (localVarResponse.headers().has(
                    utility::conversions::to_string_t("Content-Type"))) {
                utility::string_t localVarContentType =
                    localVarResponse
                        .headers()[utility::conversions::to_string_t("Content-Type")];
                if (localVarContentType.find(localVarResponseHttpContentType) ==
                    std::string::npos) {
                    throw ApiException(
                        500,
                        utility::conversions::to_string_t(
                            "error calling unity3dWatchNftContractsPost: unexpected "
                            "response type: ") +
                            localVarContentType,
                        std::make_shared<std::stringstream>(
                            localVarResponse.extract_utf8string(true).get()));
                }
            }

            return localVarResponse.extract_string();
        })
        .then([=](utility::string_t localVarResponse) { return void(); });
}

} // namespace api
} // namespace stratis
