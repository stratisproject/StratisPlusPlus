/**
 * Stratis Node API
 * Access to the Stratis Node's api.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "lightweightapi/model/ILocalExecutionResult.h"

namespace stratis {
namespace api {
namespace model {

ILocalExecutionResult::ILocalExecutionResult()
{
    m_InternalTransfersIsSet = false;
    m_GasConsumedIsSet = false;
    m_Revert = false;
    m_RevertIsSet = false;
    m_ErrorMessageIsSet = false;
    m_r_ReturnIsSet = false;
    m_LogsIsSet = false;
    m_StateRootIsSet = false;
}

ILocalExecutionResult::~ILocalExecutionResult() {}

void ILocalExecutionResult::validate()
{
    // TODO: implement validation
}

web::json::value ILocalExecutionResult::toJson() const
{
    web::json::value val = web::json::value::object();

    if (m_InternalTransfersIsSet) {
        val[utility::conversions::to_string_t(U("InternalTransfers"))] =
            ModelBase::toJson(m_InternalTransfers);
    }
    if (m_GasConsumedIsSet) {
        val[utility::conversions::to_string_t(U("GasConsumed"))] =
            ModelBase::toJson(m_GasConsumed);
    }
    if (m_RevertIsSet) {
        val[utility::conversions::to_string_t(U("Revert"))] =
            ModelBase::toJson(m_Revert);
    }
    if (m_ErrorMessageIsSet) {
        val[utility::conversions::to_string_t(U("ErrorMessage"))] =
            ModelBase::toJson(m_ErrorMessage);
    }
    if (m_r_ReturnIsSet) {
        val[utility::conversions::to_string_t(U("Return"))] =
            ModelBase::toJson(m_r_Return);
    }
    if (m_LogsIsSet) {
        val[utility::conversions::to_string_t(U("Logs"))] =
            ModelBase::toJson(m_Logs);
    }
    if (m_StateRootIsSet) {
        val[utility::conversions::to_string_t(U("StateRoot"))] =
            ModelBase::toJson(m_StateRoot);
    }

    return val;
}

bool ILocalExecutionResult::fromJson(const web::json::value& val)
{
    bool ok = true;

    if (val.has_field(
            utility::conversions::to_string_t(U("InternalTransfers")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("InternalTransfers")));
        if (!fieldValue.is_null()) {
            std::vector<std::shared_ptr<TransferInfo>> refVal_setInternalTransfers;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInternalTransfers);
            setInternalTransfers(refVal_setInternalTransfers);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("GasConsumed")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("GasConsumed")));
        if (!fieldValue.is_null()) {
            std::shared_ptr<Gas> refVal_setGasConsumed;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGasConsumed);
            setGasConsumed(refVal_setGasConsumed);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("Revert")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("Revert")));
        if (!fieldValue.is_null()) {
            bool refVal_setRevert;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRevert);
            setRevert(refVal_setRevert);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("ErrorMessage")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("ErrorMessage")));
        if (!fieldValue.is_null()) {
            std::shared_ptr<ContractErrorMessage> refVal_setErrorMessage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setErrorMessage);
            setErrorMessage(refVal_setErrorMessage);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("Return")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("Return")));
        if (!fieldValue.is_null()) {
            std::shared_ptr<Object> refVal_setRReturn;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRReturn);
            setRReturn(refVal_setRReturn);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("Logs")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("Logs")));
        if (!fieldValue.is_null()) {
            std::vector<std::shared_ptr<Log>> refVal_setLogs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLogs);
            setLogs(refVal_setLogs);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("StateRoot")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("StateRoot")));
        if (!fieldValue.is_null()) {
            std::shared_ptr<Object> refVal_setStateRoot;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStateRoot);
            setStateRoot(refVal_setStateRoot);
        }
    }
    return ok;
}

void ILocalExecutionResult::toMultipart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                     utility::conversions::to_string_t(U("."))) {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if (m_InternalTransfersIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("InternalTransfers")),
            m_InternalTransfers));
    }
    if (m_GasConsumedIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("GasConsumed")),
            m_GasConsumed));
    }
    if (m_RevertIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("Revert")), m_Revert));
    }
    if (m_ErrorMessageIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("ErrorMessage")),
            m_ErrorMessage));
    }
    if (m_r_ReturnIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("Return")),
            m_r_Return));
    }
    if (m_LogsIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("Logs")), m_Logs));
    }
    if (m_StateRootIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("StateRoot")),
            m_StateRoot));
    }
}

bool ILocalExecutionResult::fromMultiPart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                     utility::conversions::to_string_t(U("."))) {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if (multipart->hasContent(
            utility::conversions::to_string_t(U("InternalTransfers")))) {
        std::vector<std::shared_ptr<TransferInfo>> refVal_setInternalTransfers;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(
                utility::conversions::to_string_t(U("InternalTransfers"))),
            refVal_setInternalTransfers);
        setInternalTransfers(refVal_setInternalTransfers);
    }
    if (multipart->hasContent(
            utility::conversions::to_string_t(U("GasConsumed")))) {
        std::shared_ptr<Gas> refVal_setGasConsumed;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(
                utility::conversions::to_string_t(U("GasConsumed"))),
            refVal_setGasConsumed);
        setGasConsumed(refVal_setGasConsumed);
    }
    if (multipart->hasContent(utility::conversions::to_string_t(U("Revert")))) {
        bool refVal_setRevert;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(utility::conversions::to_string_t(U("Revert"))),
            refVal_setRevert);
        setRevert(refVal_setRevert);
    }
    if (multipart->hasContent(
            utility::conversions::to_string_t(U("ErrorMessage")))) {
        std::shared_ptr<ContractErrorMessage> refVal_setErrorMessage;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(
                utility::conversions::to_string_t(U("ErrorMessage"))),
            refVal_setErrorMessage);
        setErrorMessage(refVal_setErrorMessage);
    }
    if (multipart->hasContent(utility::conversions::to_string_t(U("Return")))) {
        std::shared_ptr<Object> refVal_setRReturn;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(utility::conversions::to_string_t(U("Return"))),
            refVal_setRReturn);
        setRReturn(refVal_setRReturn);
    }
    if (multipart->hasContent(utility::conversions::to_string_t(U("Logs")))) {
        std::vector<std::shared_ptr<Log>> refVal_setLogs;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(utility::conversions::to_string_t(U("Logs"))),
            refVal_setLogs);
        setLogs(refVal_setLogs);
    }
    if (multipart->hasContent(
            utility::conversions::to_string_t(U("StateRoot")))) {
        std::shared_ptr<Object> refVal_setStateRoot;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(
                utility::conversions::to_string_t(U("StateRoot"))),
            refVal_setStateRoot);
        setStateRoot(refVal_setStateRoot);
    }
    return ok;
}

std::vector<std::shared_ptr<TransferInfo>>&
ILocalExecutionResult::getInternalTransfers()
{
    return m_InternalTransfers;
}

void ILocalExecutionResult::setInternalTransfers(
    const std::vector<std::shared_ptr<TransferInfo>>& value)
{
    m_InternalTransfers = value;
    m_InternalTransfersIsSet = true;
}

bool ILocalExecutionResult::internalTransfersIsSet() const
{
    return m_InternalTransfersIsSet;
}

void ILocalExecutionResult::unsetInternalTransfers()
{
    m_InternalTransfersIsSet = false;
}
std::shared_ptr<Gas> ILocalExecutionResult::getGasConsumed() const
{
    return m_GasConsumed;
}

void ILocalExecutionResult::setGasConsumed(const std::shared_ptr<Gas>& value)
{
    m_GasConsumed = value;
    m_GasConsumedIsSet = true;
}

bool ILocalExecutionResult::gasConsumedIsSet() const
{
    return m_GasConsumedIsSet;
}

void ILocalExecutionResult::unsetGasConsumed() { m_GasConsumedIsSet = false; }
bool ILocalExecutionResult::isRevert() const { return m_Revert; }

void ILocalExecutionResult::setRevert(bool value)
{
    m_Revert = value;
    m_RevertIsSet = true;
}

bool ILocalExecutionResult::revertIsSet() const { return m_RevertIsSet; }

void ILocalExecutionResult::unsetRevert() { m_RevertIsSet = false; }
std::shared_ptr<ContractErrorMessage>
ILocalExecutionResult::getErrorMessage() const
{
    return m_ErrorMessage;
}

void ILocalExecutionResult::setErrorMessage(
    const std::shared_ptr<ContractErrorMessage>& value)
{
    m_ErrorMessage = value;
    m_ErrorMessageIsSet = true;
}

bool ILocalExecutionResult::errorMessageIsSet() const
{
    return m_ErrorMessageIsSet;
}

void ILocalExecutionResult::unsetErrorMessage() { m_ErrorMessageIsSet = false; }
std::shared_ptr<Object> ILocalExecutionResult::getRReturn() const
{
    return m_r_Return;
}

void ILocalExecutionResult::setRReturn(const std::shared_ptr<Object>& value)
{
    m_r_Return = value;
    m_r_ReturnIsSet = true;
}

bool ILocalExecutionResult::rReturnIsSet() const { return m_r_ReturnIsSet; }

void ILocalExecutionResult::unsetr_Return() { m_r_ReturnIsSet = false; }
std::vector<std::shared_ptr<Log>>& ILocalExecutionResult::getLogs()
{
    return m_Logs;
}

void ILocalExecutionResult::setLogs(
    const std::vector<std::shared_ptr<Log>>& value)
{
    m_Logs = value;
    m_LogsIsSet = true;
}

bool ILocalExecutionResult::logsIsSet() const { return m_LogsIsSet; }

void ILocalExecutionResult::unsetLogs() { m_LogsIsSet = false; }
std::shared_ptr<Object> ILocalExecutionResult::getStateRoot() const
{
    return m_StateRoot;
}

void ILocalExecutionResult::setStateRoot(const std::shared_ptr<Object>& value)
{
    m_StateRoot = value;
    m_StateRootIsSet = true;
}

bool ILocalExecutionResult::stateRootIsSet() const { return m_StateRootIsSet; }

void ILocalExecutionResult::unsetStateRoot() { m_StateRootIsSet = false; }
} // namespace model
} // namespace api
} // namespace stratis
