/**
 * Stratis Node API
 * Access to the Stratis Node's api.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "lightweightapi/model/UTXOModel.h"

namespace stratis {
namespace api {
namespace model {

UTXOModel::UTXOModel()
{
    m_Hash = utility::conversions::to_string_t("");
    m_HashIsSet = false;
    m_N = 0;
    m_NIsSet = false;
    m_Satoshis = 0L;
    m_SatoshisIsSet = false;
}

UTXOModel::~UTXOModel() {}

void UTXOModel::validate()
{
    // TODO: implement validation
}

web::json::value UTXOModel::toJson() const
{
    web::json::value val = web::json::value::object();

    if (m_HashIsSet) {
        val[utility::conversions::to_string_t(U("Hash"))] =
            ModelBase::toJson(m_Hash);
    }
    if (m_NIsSet) {
        val[utility::conversions::to_string_t(U("N"))] = ModelBase::toJson(m_N);
    }
    if (m_SatoshisIsSet) {
        val[utility::conversions::to_string_t(U("Satoshis"))] =
            ModelBase::toJson(m_Satoshis);
    }

    return val;
}

bool UTXOModel::fromJson(const web::json::value& val)
{
    bool ok = true;

    if (val.has_field(utility::conversions::to_string_t(U("Hash")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("Hash")));
        if (!fieldValue.is_null()) {
            utility::string_t refVal_setHash;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHash);
            setHash(refVal_setHash);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("N")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("N")));
        if (!fieldValue.is_null()) {
            int32_t refVal_setN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setN);
            setN(refVal_setN);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("Satoshis")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("Satoshis")));
        if (!fieldValue.is_null()) {
            int64_t refVal_setSatoshis;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSatoshis);
            setSatoshis(refVal_setSatoshis);
        }
    }
    return ok;
}

void UTXOModel::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                            const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                     utility::conversions::to_string_t(U("."))) {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if (m_HashIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("Hash")), m_Hash));
    }
    if (m_NIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("N")), m_N));
    }
    if (m_SatoshisIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("Satoshis")),
            m_Satoshis));
    }
}

bool UTXOModel::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                              const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                     utility::conversions::to_string_t(U("."))) {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if (multipart->hasContent(utility::conversions::to_string_t(U("Hash")))) {
        utility::string_t refVal_setHash;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(utility::conversions::to_string_t(U("Hash"))),
            refVal_setHash);
        setHash(refVal_setHash);
    }
    if (multipart->hasContent(utility::conversions::to_string_t(U("N")))) {
        int32_t refVal_setN;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(utility::conversions::to_string_t(U("N"))),
            refVal_setN);
        setN(refVal_setN);
    }
    if (multipart->hasContent(utility::conversions::to_string_t(U("Satoshis")))) {
        int64_t refVal_setSatoshis;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(utility::conversions::to_string_t(U("Satoshis"))),
            refVal_setSatoshis);
        setSatoshis(refVal_setSatoshis);
    }
    return ok;
}

utility::string_t UTXOModel::getHash() const { return m_Hash; }

void UTXOModel::setHash(const utility::string_t& value)
{
    m_Hash = value;
    m_HashIsSet = true;
}

bool UTXOModel::hashIsSet() const { return m_HashIsSet; }

void UTXOModel::unsetHash() { m_HashIsSet = false; }
int32_t UTXOModel::getN() const { return m_N; }

void UTXOModel::setN(int32_t value)
{
    m_N = value;
    m_NIsSet = true;
}

bool UTXOModel::NIsSet() const { return m_NIsSet; }

void UTXOModel::unsetN() { m_NIsSet = false; }
int64_t UTXOModel::getSatoshis() const { return m_Satoshis; }

void UTXOModel::setSatoshis(int64_t value)
{
    m_Satoshis = value;
    m_SatoshisIsSet = true;
}

bool UTXOModel::satoshisIsSet() const { return m_SatoshisIsSet; }

void UTXOModel::unsetSatoshis() { m_SatoshisIsSet = false; }
} // namespace model
} // namespace api
} // namespace stratis
