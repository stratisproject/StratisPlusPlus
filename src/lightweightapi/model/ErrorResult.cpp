/**
 * Stratis Node API
 * Access to the Stratis Node's api.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "lightweightapi/model/ErrorResult.h"

namespace stratis {
namespace api {
namespace model {

ErrorResult::ErrorResult()
{
    m_ValueIsSet = false;
    m_FormattersIsSet = false;
    m_ContentTypesIsSet = false;
    m_DeclaredType = utility::conversions::to_string_t("");
    m_DeclaredTypeIsSet = false;
    m_StatusCode = 0;
    m_StatusCodeIsSet = false;
}

ErrorResult::~ErrorResult() {}

void ErrorResult::validate()
{
    // TODO: implement validation
}

web::json::value ErrorResult::toJson() const
{
    web::json::value val = web::json::value::object();

    if (m_ValueIsSet) {
        val[utility::conversions::to_string_t(U("Value"))] =
            ModelBase::toJson(m_Value);
    }
    if (m_FormattersIsSet) {
        val[utility::conversions::to_string_t(U("Formatters"))] =
            ModelBase::toJson(m_Formatters);
    }
    if (m_ContentTypesIsSet) {
        val[utility::conversions::to_string_t(U("ContentTypes"))] =
            ModelBase::toJson(m_ContentTypes);
    }
    if (m_DeclaredTypeIsSet) {
        val[utility::conversions::to_string_t(U("DeclaredType"))] =
            ModelBase::toJson(m_DeclaredType);
    }
    if (m_StatusCodeIsSet) {
        val[utility::conversions::to_string_t(U("StatusCode"))] =
            ModelBase::toJson(m_StatusCode);
    }

    return val;
}

bool ErrorResult::fromJson(const web::json::value& val)
{
    bool ok = true;

    if (val.has_field(utility::conversions::to_string_t(U("Value")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("Value")));
        if (!fieldValue.is_null()) {
            std::shared_ptr<Object> refVal_setValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValue);
            setValue(refVal_setValue);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("Formatters")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("Formatters")));
        if (!fieldValue.is_null()) {
            std::vector<std::shared_ptr<Object>> refVal_setFormatters;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFormatters);
            setFormatters(refVal_setFormatters);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("ContentTypes")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("ContentTypes")));
        if (!fieldValue.is_null()) {
            std::vector<utility::string_t> refVal_setContentTypes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContentTypes);
            setContentTypes(refVal_setContentTypes);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("DeclaredType")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("DeclaredType")));
        if (!fieldValue.is_null()) {
            utility::string_t refVal_setDeclaredType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeclaredType);
            setDeclaredType(refVal_setDeclaredType);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("StatusCode")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("StatusCode")));
        if (!fieldValue.is_null()) {
            int32_t refVal_setStatusCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatusCode);
            setStatusCode(refVal_setStatusCode);
        }
    }
    return ok;
}

void ErrorResult::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                              const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                     utility::conversions::to_string_t(U("."))) {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if (m_ValueIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("Value")), m_Value));
    }
    if (m_FormattersIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("Formatters")),
            m_Formatters));
    }
    if (m_ContentTypesIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("ContentTypes")),
            m_ContentTypes));
    }
    if (m_DeclaredTypeIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("DeclaredType")),
            m_DeclaredType));
    }
    if (m_StatusCodeIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("StatusCode")),
            m_StatusCode));
    }
}

bool ErrorResult::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                                const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                     utility::conversions::to_string_t(U("."))) {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if (multipart->hasContent(utility::conversions::to_string_t(U("Value")))) {
        std::shared_ptr<Object> refVal_setValue;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(utility::conversions::to_string_t(U("Value"))),
            refVal_setValue);
        setValue(refVal_setValue);
    }
    if (multipart->hasContent(
            utility::conversions::to_string_t(U("Formatters")))) {
        std::vector<std::shared_ptr<Object>> refVal_setFormatters;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(
                utility::conversions::to_string_t(U("Formatters"))),
            refVal_setFormatters);
        setFormatters(refVal_setFormatters);
    }
    if (multipart->hasContent(
            utility::conversions::to_string_t(U("ContentTypes")))) {
        std::vector<utility::string_t> refVal_setContentTypes;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(
                utility::conversions::to_string_t(U("ContentTypes"))),
            refVal_setContentTypes);
        setContentTypes(refVal_setContentTypes);
    }
    if (multipart->hasContent(
            utility::conversions::to_string_t(U("DeclaredType")))) {
        utility::string_t refVal_setDeclaredType;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(
                utility::conversions::to_string_t(U("DeclaredType"))),
            refVal_setDeclaredType);
        setDeclaredType(refVal_setDeclaredType);
    }
    if (multipart->hasContent(
            utility::conversions::to_string_t(U("StatusCode")))) {
        int32_t refVal_setStatusCode;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(
                utility::conversions::to_string_t(U("StatusCode"))),
            refVal_setStatusCode);
        setStatusCode(refVal_setStatusCode);
    }
    return ok;
}

std::shared_ptr<Object> ErrorResult::getValue() const { return m_Value; }

void ErrorResult::setValue(const std::shared_ptr<Object>& value)
{
    m_Value = value;
    m_ValueIsSet = true;
}

bool ErrorResult::valueIsSet() const { return m_ValueIsSet; }

void ErrorResult::unsetValue() { m_ValueIsSet = false; }
std::vector<std::shared_ptr<Object>>& ErrorResult::getFormatters()
{
    return m_Formatters;
}

void ErrorResult::setFormatters(
    const std::vector<std::shared_ptr<Object>>& value)
{
    m_Formatters = value;
    m_FormattersIsSet = true;
}

bool ErrorResult::formattersIsSet() const { return m_FormattersIsSet; }

void ErrorResult::unsetFormatters() { m_FormattersIsSet = false; }
std::vector<utility::string_t>& ErrorResult::getContentTypes()
{
    return m_ContentTypes;
}

void ErrorResult::setContentTypes(const std::vector<utility::string_t>& value)
{
    m_ContentTypes = value;
    m_ContentTypesIsSet = true;
}

bool ErrorResult::contentTypesIsSet() const { return m_ContentTypesIsSet; }

void ErrorResult::unsetContentTypes() { m_ContentTypesIsSet = false; }
utility::string_t ErrorResult::getDeclaredType() const
{
    return m_DeclaredType;
}

void ErrorResult::setDeclaredType(const utility::string_t& value)
{
    m_DeclaredType = value;
    m_DeclaredTypeIsSet = true;
}

bool ErrorResult::declaredTypeIsSet() const { return m_DeclaredTypeIsSet; }

void ErrorResult::unsetDeclaredType() { m_DeclaredTypeIsSet = false; }
int32_t ErrorResult::getStatusCode() const { return m_StatusCode; }

void ErrorResult::setStatusCode(int32_t value)
{
    m_StatusCode = value;
    m_StatusCodeIsSet = true;
}

bool ErrorResult::statusCodeIsSet() const { return m_StatusCodeIsSet; }

void ErrorResult::unsetStatusCode() { m_StatusCodeIsSet = false; }
} // namespace model
} // namespace api
} // namespace stratis
