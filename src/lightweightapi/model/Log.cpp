/**
 * Stratis Node API
 * Access to the Stratis Node's api.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "lightweightapi/model/Log.h"

namespace stratis {
namespace api {
namespace model {

Log::Log()
{
    m_Address = utility::conversions::to_string_t("");
    m_AddressIsSet = false;
    m_TopicsIsSet = false;
    m_DataIsSet = false;
}

Log::~Log() {}

void Log::validate()
{
    // TODO: implement validation
}

web::json::value Log::toJson() const
{
    web::json::value val = web::json::value::object();

    if (m_AddressIsSet) {
        val[utility::conversions::to_string_t(U("Address"))] =
            ModelBase::toJson(m_Address);
    }
    if (m_TopicsIsSet) {
        val[utility::conversions::to_string_t(U("Topics"))] =
            ModelBase::toJson(m_Topics);
    }
    if (m_DataIsSet) {
        val[utility::conversions::to_string_t(U("Data"))] =
            ModelBase::toJson(m_Data);
    }

    return val;
}

bool Log::fromJson(const web::json::value& val)
{
    bool ok = true;

    if (val.has_field(utility::conversions::to_string_t(U("Address")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("Address")));
        if (!fieldValue.is_null()) {
            utility::string_t refVal_setAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAddress);
            setAddress(refVal_setAddress);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("Topics")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("Topics")));
        if (!fieldValue.is_null()) {
            std::vector<utility::string_t> refVal_setTopics;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTopics);
            setTopics(refVal_setTopics);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("Data")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("Data")));
        if (!fieldValue.is_null()) {
            utility::string_t refVal_setData;
            ok &= ModelBase::fromJson(fieldValue, refVal_setData);
            setData(refVal_setData);
        }
    }
    return ok;
}

void Log::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                      const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                     utility::conversions::to_string_t(U("."))) {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if (m_AddressIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("Address")),
            m_Address));
    }
    if (m_TopicsIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("Topics")), m_Topics));
    }
    if (m_DataIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("Data")), m_Data));
    }
}

bool Log::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                        const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                     utility::conversions::to_string_t(U("."))) {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if (multipart->hasContent(utility::conversions::to_string_t(U("Address")))) {
        utility::string_t refVal_setAddress;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(utility::conversions::to_string_t(U("Address"))),
            refVal_setAddress);
        setAddress(refVal_setAddress);
    }
    if (multipart->hasContent(utility::conversions::to_string_t(U("Topics")))) {
        std::vector<utility::string_t> refVal_setTopics;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(utility::conversions::to_string_t(U("Topics"))),
            refVal_setTopics);
        setTopics(refVal_setTopics);
    }
    if (multipart->hasContent(utility::conversions::to_string_t(U("Data")))) {
        utility::string_t refVal_setData;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(utility::conversions::to_string_t(U("Data"))),
            refVal_setData);
        setData(refVal_setData);
    }
    return ok;
}

utility::string_t Log::getAddress() const { return m_Address; }

void Log::setAddress(const utility::string_t& value)
{
    m_Address = value;
    m_AddressIsSet = true;
}

bool Log::addressIsSet() const { return m_AddressIsSet; }

void Log::unsetAddress() { m_AddressIsSet = false; }
std::vector<utility::string_t>& Log::getTopics() { return m_Topics; }

void Log::setTopics(const std::vector<utility::string_t>& value)
{
    m_Topics = value;
    m_TopicsIsSet = true;
}

bool Log::topicsIsSet() const { return m_TopicsIsSet; }

void Log::unsetTopics() { m_TopicsIsSet = false; }
utility::string_t Log::getData() const { return m_Data; }

void Log::setData(const utility::string_t& value)
{
    m_Data = value;
    m_DataIsSet = true;
}

bool Log::dataIsSet() const { return m_DataIsSet; }

void Log::unsetData() { m_DataIsSet = false; }
} // namespace model
} // namespace api
} // namespace stratis
