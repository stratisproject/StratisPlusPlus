/**
 * Stratis Node API
 * Access to the Stratis Node's api.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "lightweightapi/model/ReceiptResponse.h"

namespace stratis {
namespace api {
namespace model {

ReceiptResponse::ReceiptResponse()
{
    m_TransactionHash = utility::conversions::to_string_t("");
    m_TransactionHashIsSet = false;
    m_BlockHash = utility::conversions::to_string_t("");
    m_BlockHashIsSet = false;
    m_BlockNumber = 0L;
    m_BlockNumberIsSet = false;
    m_PostState = utility::conversions::to_string_t("");
    m_PostStateIsSet = false;
    m_GasUsed = 0L;
    m_GasUsedIsSet = false;
    m_From = utility::conversions::to_string_t("");
    m_FromIsSet = false;
    m_To = utility::conversions::to_string_t("");
    m_ToIsSet = false;
    m_NewContractAddress = utility::conversions::to_string_t("");
    m_NewContractAddressIsSet = false;
    m_Success = false;
    m_SuccessIsSet = false;
    m_ReturnValue = utility::conversions::to_string_t("");
    m_ReturnValueIsSet = false;
    m_Bloom = utility::conversions::to_string_t("");
    m_BloomIsSet = false;
    m_Error = utility::conversions::to_string_t("");
    m_ErrorIsSet = false;
    m_LogsIsSet = false;
}

ReceiptResponse::~ReceiptResponse() {}

void ReceiptResponse::validate()
{
    // TODO: implement validation
}

web::json::value ReceiptResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    if (m_TransactionHashIsSet) {
        val[utility::conversions::to_string_t(U("TransactionHash"))] =
            ModelBase::toJson(m_TransactionHash);
    }
    if (m_BlockHashIsSet) {
        val[utility::conversions::to_string_t(U("BlockHash"))] =
            ModelBase::toJson(m_BlockHash);
    }
    if (m_BlockNumberIsSet) {
        val[utility::conversions::to_string_t(U("BlockNumber"))] =
            ModelBase::toJson(m_BlockNumber);
    }
    if (m_PostStateIsSet) {
        val[utility::conversions::to_string_t(U("PostState"))] =
            ModelBase::toJson(m_PostState);
    }
    if (m_GasUsedIsSet) {
        val[utility::conversions::to_string_t(U("GasUsed"))] =
            ModelBase::toJson(m_GasUsed);
    }
    if (m_FromIsSet) {
        val[utility::conversions::to_string_t(U("From"))] =
            ModelBase::toJson(m_From);
    }
    if (m_ToIsSet) {
        val[utility::conversions::to_string_t(U("To"))] = ModelBase::toJson(m_To);
    }
    if (m_NewContractAddressIsSet) {
        val[utility::conversions::to_string_t(U("NewContractAddress"))] =
            ModelBase::toJson(m_NewContractAddress);
    }
    if (m_SuccessIsSet) {
        val[utility::conversions::to_string_t(U("Success"))] =
            ModelBase::toJson(m_Success);
    }
    if (m_ReturnValueIsSet) {
        val[utility::conversions::to_string_t(U("ReturnValue"))] =
            ModelBase::toJson(m_ReturnValue);
    }
    if (m_BloomIsSet) {
        val[utility::conversions::to_string_t(U("Bloom"))] =
            ModelBase::toJson(m_Bloom);
    }
    if (m_ErrorIsSet) {
        val[utility::conversions::to_string_t(U("Error"))] =
            ModelBase::toJson(m_Error);
    }
    if (m_LogsIsSet) {
        val[utility::conversions::to_string_t(U("Logs"))] =
            ModelBase::toJson(m_Logs);
    }

    return val;
}

bool ReceiptResponse::fromJson(const web::json::value& val)
{
    bool ok = true;

    if (val.has_field(utility::conversions::to_string_t(U("TransactionHash")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("TransactionHash")));
        if (!fieldValue.is_null()) {
            utility::string_t refVal_setTransactionHash;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTransactionHash);
            setTransactionHash(refVal_setTransactionHash);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("BlockHash")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("BlockHash")));
        if (!fieldValue.is_null()) {
            utility::string_t refVal_setBlockHash;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockHash);
            setBlockHash(refVal_setBlockHash);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("BlockNumber")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("BlockNumber")));
        if (!fieldValue.is_null()) {
            int64_t refVal_setBlockNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockNumber);
            setBlockNumber(refVal_setBlockNumber);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("PostState")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("PostState")));
        if (!fieldValue.is_null()) {
            utility::string_t refVal_setPostState;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPostState);
            setPostState(refVal_setPostState);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("GasUsed")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("GasUsed")));
        if (!fieldValue.is_null()) {
            int64_t refVal_setGasUsed;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGasUsed);
            setGasUsed(refVal_setGasUsed);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("From")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("From")));
        if (!fieldValue.is_null()) {
            utility::string_t refVal_setFrom;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFrom);
            setFrom(refVal_setFrom);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("To")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("To")));
        if (!fieldValue.is_null()) {
            utility::string_t refVal_setTo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTo);
            setTo(refVal_setTo);
        }
    }
    if (val.has_field(
            utility::conversions::to_string_t(U("NewContractAddress")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("NewContractAddress")));
        if (!fieldValue.is_null()) {
            utility::string_t refVal_setNewContractAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNewContractAddress);
            setNewContractAddress(refVal_setNewContractAddress);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("Success")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("Success")));
        if (!fieldValue.is_null()) {
            bool refVal_setSuccess;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSuccess);
            setSuccess(refVal_setSuccess);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("ReturnValue")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("ReturnValue")));
        if (!fieldValue.is_null()) {
            utility::string_t refVal_setReturnValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReturnValue);
            setReturnValue(refVal_setReturnValue);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("Bloom")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("Bloom")));
        if (!fieldValue.is_null()) {
            utility::string_t refVal_setBloom;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBloom);
            setBloom(refVal_setBloom);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("Error")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("Error")));
        if (!fieldValue.is_null()) {
            utility::string_t refVal_setError;
            ok &= ModelBase::fromJson(fieldValue, refVal_setError);
            setError(refVal_setError);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("Logs")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("Logs")));
        if (!fieldValue.is_null()) {
            std::vector<std::shared_ptr<LogResponse>> refVal_setLogs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLogs);
            setLogs(refVal_setLogs);
        }
    }
    return ok;
}

void ReceiptResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                                  const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                     utility::conversions::to_string_t(U("."))) {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if (m_TransactionHashIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("TransactionHash")),
            m_TransactionHash));
    }
    if (m_BlockHashIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("BlockHash")),
            m_BlockHash));
    }
    if (m_BlockNumberIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("BlockNumber")),
            m_BlockNumber));
    }
    if (m_PostStateIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("PostState")),
            m_PostState));
    }
    if (m_GasUsedIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("GasUsed")),
            m_GasUsed));
    }
    if (m_FromIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("From")), m_From));
    }
    if (m_ToIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("To")), m_To));
    }
    if (m_NewContractAddressIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("NewContractAddress")),
            m_NewContractAddress));
    }
    if (m_SuccessIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("Success")),
            m_Success));
    }
    if (m_ReturnValueIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("ReturnValue")),
            m_ReturnValue));
    }
    if (m_BloomIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("Bloom")), m_Bloom));
    }
    if (m_ErrorIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("Error")), m_Error));
    }
    if (m_LogsIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("Logs")), m_Logs));
    }
}

bool ReceiptResponse::fromMultiPart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                     utility::conversions::to_string_t(U("."))) {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if (multipart->hasContent(
            utility::conversions::to_string_t(U("TransactionHash")))) {
        utility::string_t refVal_setTransactionHash;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(
                utility::conversions::to_string_t(U("TransactionHash"))),
            refVal_setTransactionHash);
        setTransactionHash(refVal_setTransactionHash);
    }
    if (multipart->hasContent(
            utility::conversions::to_string_t(U("BlockHash")))) {
        utility::string_t refVal_setBlockHash;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(
                utility::conversions::to_string_t(U("BlockHash"))),
            refVal_setBlockHash);
        setBlockHash(refVal_setBlockHash);
    }
    if (multipart->hasContent(
            utility::conversions::to_string_t(U("BlockNumber")))) {
        int64_t refVal_setBlockNumber;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(
                utility::conversions::to_string_t(U("BlockNumber"))),
            refVal_setBlockNumber);
        setBlockNumber(refVal_setBlockNumber);
    }
    if (multipart->hasContent(
            utility::conversions::to_string_t(U("PostState")))) {
        utility::string_t refVal_setPostState;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(
                utility::conversions::to_string_t(U("PostState"))),
            refVal_setPostState);
        setPostState(refVal_setPostState);
    }
    if (multipart->hasContent(utility::conversions::to_string_t(U("GasUsed")))) {
        int64_t refVal_setGasUsed;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(utility::conversions::to_string_t(U("GasUsed"))),
            refVal_setGasUsed);
        setGasUsed(refVal_setGasUsed);
    }
    if (multipart->hasContent(utility::conversions::to_string_t(U("From")))) {
        utility::string_t refVal_setFrom;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(utility::conversions::to_string_t(U("From"))),
            refVal_setFrom);
        setFrom(refVal_setFrom);
    }
    if (multipart->hasContent(utility::conversions::to_string_t(U("To")))) {
        utility::string_t refVal_setTo;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(utility::conversions::to_string_t(U("To"))),
            refVal_setTo);
        setTo(refVal_setTo);
    }
    if (multipart->hasContent(
            utility::conversions::to_string_t(U("NewContractAddress")))) {
        utility::string_t refVal_setNewContractAddress;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(
                utility::conversions::to_string_t(U("NewContractAddress"))),
            refVal_setNewContractAddress);
        setNewContractAddress(refVal_setNewContractAddress);
    }
    if (multipart->hasContent(utility::conversions::to_string_t(U("Success")))) {
        bool refVal_setSuccess;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(utility::conversions::to_string_t(U("Success"))),
            refVal_setSuccess);
        setSuccess(refVal_setSuccess);
    }
    if (multipart->hasContent(
            utility::conversions::to_string_t(U("ReturnValue")))) {
        utility::string_t refVal_setReturnValue;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(
                utility::conversions::to_string_t(U("ReturnValue"))),
            refVal_setReturnValue);
        setReturnValue(refVal_setReturnValue);
    }
    if (multipart->hasContent(utility::conversions::to_string_t(U("Bloom")))) {
        utility::string_t refVal_setBloom;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(utility::conversions::to_string_t(U("Bloom"))),
            refVal_setBloom);
        setBloom(refVal_setBloom);
    }
    if (multipart->hasContent(utility::conversions::to_string_t(U("Error")))) {
        utility::string_t refVal_setError;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(utility::conversions::to_string_t(U("Error"))),
            refVal_setError);
        setError(refVal_setError);
    }
    if (multipart->hasContent(utility::conversions::to_string_t(U("Logs")))) {
        std::vector<std::shared_ptr<LogResponse>> refVal_setLogs;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(utility::conversions::to_string_t(U("Logs"))),
            refVal_setLogs);
        setLogs(refVal_setLogs);
    }
    return ok;
}

utility::string_t ReceiptResponse::getTransactionHash() const
{
    return m_TransactionHash;
}

void ReceiptResponse::setTransactionHash(const utility::string_t& value)
{
    m_TransactionHash = value;
    m_TransactionHashIsSet = true;
}

bool ReceiptResponse::transactionHashIsSet() const
{
    return m_TransactionHashIsSet;
}

void ReceiptResponse::unsetTransactionHash() { m_TransactionHashIsSet = false; }
utility::string_t ReceiptResponse::getBlockHash() const { return m_BlockHash; }

void ReceiptResponse::setBlockHash(const utility::string_t& value)
{
    m_BlockHash = value;
    m_BlockHashIsSet = true;
}

bool ReceiptResponse::blockHashIsSet() const { return m_BlockHashIsSet; }

void ReceiptResponse::unsetBlockHash() { m_BlockHashIsSet = false; }
int64_t ReceiptResponse::getBlockNumber() const { return m_BlockNumber; }

void ReceiptResponse::setBlockNumber(int64_t value)
{
    m_BlockNumber = value;
    m_BlockNumberIsSet = true;
}

bool ReceiptResponse::blockNumberIsSet() const { return m_BlockNumberIsSet; }

void ReceiptResponse::unsetBlockNumber() { m_BlockNumberIsSet = false; }
utility::string_t ReceiptResponse::getPostState() const { return m_PostState; }

void ReceiptResponse::setPostState(const utility::string_t& value)
{
    m_PostState = value;
    m_PostStateIsSet = true;
}

bool ReceiptResponse::postStateIsSet() const { return m_PostStateIsSet; }

void ReceiptResponse::unsetPostState() { m_PostStateIsSet = false; }
int64_t ReceiptResponse::getGasUsed() const { return m_GasUsed; }

void ReceiptResponse::setGasUsed(int64_t value)
{
    m_GasUsed = value;
    m_GasUsedIsSet = true;
}

bool ReceiptResponse::gasUsedIsSet() const { return m_GasUsedIsSet; }

void ReceiptResponse::unsetGasUsed() { m_GasUsedIsSet = false; }
utility::string_t ReceiptResponse::getFrom() const { return m_From; }

void ReceiptResponse::setFrom(const utility::string_t& value)
{
    m_From = value;
    m_FromIsSet = true;
}

bool ReceiptResponse::fromIsSet() const { return m_FromIsSet; }

void ReceiptResponse::unsetFrom() { m_FromIsSet = false; }
utility::string_t ReceiptResponse::getTo() const { return m_To; }

void ReceiptResponse::setTo(const utility::string_t& value)
{
    m_To = value;
    m_ToIsSet = true;
}

bool ReceiptResponse::toIsSet() const { return m_ToIsSet; }

void ReceiptResponse::unsetTo() { m_ToIsSet = false; }
utility::string_t ReceiptResponse::getNewContractAddress() const
{
    return m_NewContractAddress;
}

void ReceiptResponse::setNewContractAddress(const utility::string_t& value)
{
    m_NewContractAddress = value;
    m_NewContractAddressIsSet = true;
}

bool ReceiptResponse::newContractAddressIsSet() const
{
    return m_NewContractAddressIsSet;
}

void ReceiptResponse::unsetNewContractAddress()
{
    m_NewContractAddressIsSet = false;
}
bool ReceiptResponse::isSuccess() const { return m_Success; }

void ReceiptResponse::setSuccess(bool value)
{
    m_Success = value;
    m_SuccessIsSet = true;
}

bool ReceiptResponse::successIsSet() const { return m_SuccessIsSet; }

void ReceiptResponse::unsetSuccess() { m_SuccessIsSet = false; }
utility::string_t ReceiptResponse::getReturnValue() const
{
    return m_ReturnValue;
}

void ReceiptResponse::setReturnValue(const utility::string_t& value)
{
    m_ReturnValue = value;
    m_ReturnValueIsSet = true;
}

bool ReceiptResponse::returnValueIsSet() const { return m_ReturnValueIsSet; }

void ReceiptResponse::unsetReturnValue() { m_ReturnValueIsSet = false; }
utility::string_t ReceiptResponse::getBloom() const { return m_Bloom; }

void ReceiptResponse::setBloom(const utility::string_t& value)
{
    m_Bloom = value;
    m_BloomIsSet = true;
}

bool ReceiptResponse::bloomIsSet() const { return m_BloomIsSet; }

void ReceiptResponse::unsetBloom() { m_BloomIsSet = false; }
utility::string_t ReceiptResponse::getError() const { return m_Error; }

void ReceiptResponse::setError(const utility::string_t& value)
{
    m_Error = value;
    m_ErrorIsSet = true;
}

bool ReceiptResponse::errorIsSet() const { return m_ErrorIsSet; }

void ReceiptResponse::unsetError() { m_ErrorIsSet = false; }
std::vector<std::shared_ptr<LogResponse>>& ReceiptResponse::getLogs()
{
    return m_Logs;
}

void ReceiptResponse::setLogs(
    const std::vector<std::shared_ptr<LogResponse>>& value)
{
    m_Logs = value;
    m_LogsIsSet = true;
}

bool ReceiptResponse::logsIsSet() const { return m_LogsIsSet; }

void ReceiptResponse::unsetLogs() { m_LogsIsSet = false; }
} // namespace model
} // namespace api
} // namespace stratis
