/**
 * Stratis Node API
 * Access to the Stratis Node's api.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "lightweightapi/model/LocalCallContractRequest.h"

namespace stratis {
namespace api {
namespace model {

LocalCallContractRequest::LocalCallContractRequest()
{
    m_BlockHeight = 0L;
    m_BlockHeightIsSet = false;
    m_ContractAddress = utility::conversions::to_string_t("");
    m_ContractAddressIsSet = false;
    m_MethodName = utility::conversions::to_string_t("");
    m_MethodNameIsSet = false;
    m_Amount = utility::conversions::to_string_t("");
    m_AmountIsSet = false;
    m_GasPrice = 0L;
    m_GasPriceIsSet = false;
    m_GasLimit = 0L;
    m_GasLimitIsSet = false;
    m_Sender = utility::conversions::to_string_t("");
    m_SenderIsSet = false;
    m_ParametersIsSet = false;
}

LocalCallContractRequest::~LocalCallContractRequest() {}

void LocalCallContractRequest::validate()
{
    // TODO: implement validation
}

web::json::value LocalCallContractRequest::toJson() const
{
    web::json::value val = web::json::value::object();

    if (m_BlockHeightIsSet) {
        val[utility::conversions::to_string_t(U("BlockHeight"))] =
            ModelBase::toJson(m_BlockHeight);
    }
    if (m_ContractAddressIsSet) {
        val[utility::conversions::to_string_t(U("ContractAddress"))] =
            ModelBase::toJson(m_ContractAddress);
    }
    if (m_MethodNameIsSet) {
        val[utility::conversions::to_string_t(U("MethodName"))] =
            ModelBase::toJson(m_MethodName);
    }
    if (m_AmountIsSet) {
        val[utility::conversions::to_string_t(U("Amount"))] =
            ModelBase::toJson(m_Amount);
    }
    if (m_GasPriceIsSet) {
        val[utility::conversions::to_string_t(U("GasPrice"))] =
            ModelBase::toJson(m_GasPrice);
    }
    if (m_GasLimitIsSet) {
        val[utility::conversions::to_string_t(U("GasLimit"))] =
            ModelBase::toJson(m_GasLimit);
    }
    if (m_SenderIsSet) {
        val[utility::conversions::to_string_t(U("Sender"))] =
            ModelBase::toJson(m_Sender);
    }
    if (m_ParametersIsSet) {
        val[utility::conversions::to_string_t(U("Parameters"))] =
            ModelBase::toJson(m_Parameters);
    }

    return val;
}

bool LocalCallContractRequest::fromJson(const web::json::value& val)
{
    bool ok = true;

    if (val.has_field(utility::conversions::to_string_t(U("BlockHeight")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("BlockHeight")));
        if (!fieldValue.is_null()) {
            int64_t refVal_setBlockHeight;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockHeight);
            setBlockHeight(refVal_setBlockHeight);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("ContractAddress")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("ContractAddress")));
        if (!fieldValue.is_null()) {
            utility::string_t refVal_setContractAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContractAddress);
            setContractAddress(refVal_setContractAddress);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("MethodName")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("MethodName")));
        if (!fieldValue.is_null()) {
            utility::string_t refVal_setMethodName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMethodName);
            setMethodName(refVal_setMethodName);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("Amount")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("Amount")));
        if (!fieldValue.is_null()) {
            utility::string_t refVal_setAmount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAmount);
            setAmount(refVal_setAmount);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("GasPrice")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("GasPrice")));
        if (!fieldValue.is_null()) {
            int64_t refVal_setGasPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGasPrice);
            setGasPrice(refVal_setGasPrice);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("GasLimit")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("GasLimit")));
        if (!fieldValue.is_null()) {
            int64_t refVal_setGasLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGasLimit);
            setGasLimit(refVal_setGasLimit);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("Sender")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("Sender")));
        if (!fieldValue.is_null()) {
            utility::string_t refVal_setSender;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSender);
            setSender(refVal_setSender);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("Parameters")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("Parameters")));
        if (!fieldValue.is_null()) {
            std::vector<utility::string_t> refVal_setParameters;
            ok &= ModelBase::fromJson(fieldValue, refVal_setParameters);
            setParameters(refVal_setParameters);
        }
    }
    return ok;
}

void LocalCallContractRequest::toMultipart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                     utility::conversions::to_string_t(U("."))) {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if (m_BlockHeightIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("BlockHeight")),
            m_BlockHeight));
    }
    if (m_ContractAddressIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("ContractAddress")),
            m_ContractAddress));
    }
    if (m_MethodNameIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("MethodName")),
            m_MethodName));
    }
    if (m_AmountIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("Amount")), m_Amount));
    }
    if (m_GasPriceIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("GasPrice")),
            m_GasPrice));
    }
    if (m_GasLimitIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("GasLimit")),
            m_GasLimit));
    }
    if (m_SenderIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("Sender")), m_Sender));
    }
    if (m_ParametersIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("Parameters")),
            m_Parameters));
    }
}

bool LocalCallContractRequest::fromMultiPart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                     utility::conversions::to_string_t(U("."))) {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if (multipart->hasContent(
            utility::conversions::to_string_t(U("BlockHeight")))) {
        int64_t refVal_setBlockHeight;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(
                utility::conversions::to_string_t(U("BlockHeight"))),
            refVal_setBlockHeight);
        setBlockHeight(refVal_setBlockHeight);
    }
    if (multipart->hasContent(
            utility::conversions::to_string_t(U("ContractAddress")))) {
        utility::string_t refVal_setContractAddress;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(
                utility::conversions::to_string_t(U("ContractAddress"))),
            refVal_setContractAddress);
        setContractAddress(refVal_setContractAddress);
    }
    if (multipart->hasContent(
            utility::conversions::to_string_t(U("MethodName")))) {
        utility::string_t refVal_setMethodName;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(
                utility::conversions::to_string_t(U("MethodName"))),
            refVal_setMethodName);
        setMethodName(refVal_setMethodName);
    }
    if (multipart->hasContent(utility::conversions::to_string_t(U("Amount")))) {
        utility::string_t refVal_setAmount;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(utility::conversions::to_string_t(U("Amount"))),
            refVal_setAmount);
        setAmount(refVal_setAmount);
    }
    if (multipart->hasContent(utility::conversions::to_string_t(U("GasPrice")))) {
        int64_t refVal_setGasPrice;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(utility::conversions::to_string_t(U("GasPrice"))),
            refVal_setGasPrice);
        setGasPrice(refVal_setGasPrice);
    }
    if (multipart->hasContent(utility::conversions::to_string_t(U("GasLimit")))) {
        int64_t refVal_setGasLimit;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(utility::conversions::to_string_t(U("GasLimit"))),
            refVal_setGasLimit);
        setGasLimit(refVal_setGasLimit);
    }
    if (multipart->hasContent(utility::conversions::to_string_t(U("Sender")))) {
        utility::string_t refVal_setSender;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(utility::conversions::to_string_t(U("Sender"))),
            refVal_setSender);
        setSender(refVal_setSender);
    }
    if (multipart->hasContent(
            utility::conversions::to_string_t(U("Parameters")))) {
        std::vector<utility::string_t> refVal_setParameters;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(
                utility::conversions::to_string_t(U("Parameters"))),
            refVal_setParameters);
        setParameters(refVal_setParameters);
    }
    return ok;
}

int64_t LocalCallContractRequest::getBlockHeight() const
{
    return m_BlockHeight;
}

void LocalCallContractRequest::setBlockHeight(int64_t value)
{
    m_BlockHeight = value;
    m_BlockHeightIsSet = true;
}

bool LocalCallContractRequest::blockHeightIsSet() const
{
    return m_BlockHeightIsSet;
}

void LocalCallContractRequest::unsetBlockHeight()
{
    m_BlockHeightIsSet = false;
}
utility::string_t LocalCallContractRequest::getContractAddress() const
{
    return m_ContractAddress;
}

void LocalCallContractRequest::setContractAddress(
    const utility::string_t& value)
{
    m_ContractAddress = value;
    m_ContractAddressIsSet = true;
}

bool LocalCallContractRequest::contractAddressIsSet() const
{
    return m_ContractAddressIsSet;
}

void LocalCallContractRequest::unsetContractAddress()
{
    m_ContractAddressIsSet = false;
}
utility::string_t LocalCallContractRequest::getMethodName() const
{
    return m_MethodName;
}

void LocalCallContractRequest::setMethodName(const utility::string_t& value)
{
    m_MethodName = value;
    m_MethodNameIsSet = true;
}

bool LocalCallContractRequest::methodNameIsSet() const
{
    return m_MethodNameIsSet;
}

void LocalCallContractRequest::unsetMethodName() { m_MethodNameIsSet = false; }
utility::string_t LocalCallContractRequest::getAmount() const
{
    return m_Amount;
}

void LocalCallContractRequest::setAmount(const utility::string_t& value)
{
    m_Amount = value;
    m_AmountIsSet = true;
}

bool LocalCallContractRequest::amountIsSet() const { return m_AmountIsSet; }

void LocalCallContractRequest::unsetAmount() { m_AmountIsSet = false; }
int64_t LocalCallContractRequest::getGasPrice() const { return m_GasPrice; }

void LocalCallContractRequest::setGasPrice(int64_t value)
{
    m_GasPrice = value;
    m_GasPriceIsSet = true;
}

bool LocalCallContractRequest::gasPriceIsSet() const { return m_GasPriceIsSet; }

void LocalCallContractRequest::unsetGasPrice() { m_GasPriceIsSet = false; }
int64_t LocalCallContractRequest::getGasLimit() const { return m_GasLimit; }

void LocalCallContractRequest::setGasLimit(int64_t value)
{
    m_GasLimit = value;
    m_GasLimitIsSet = true;
}

bool LocalCallContractRequest::gasLimitIsSet() const { return m_GasLimitIsSet; }

void LocalCallContractRequest::unsetGasLimit() { m_GasLimitIsSet = false; }
utility::string_t LocalCallContractRequest::getSender() const
{
    return m_Sender;
}

void LocalCallContractRequest::setSender(const utility::string_t& value)
{
    m_Sender = value;
    m_SenderIsSet = true;
}

bool LocalCallContractRequest::senderIsSet() const { return m_SenderIsSet; }

void LocalCallContractRequest::unsetSender() { m_SenderIsSet = false; }
std::vector<utility::string_t>& LocalCallContractRequest::getParameters()
{
    return m_Parameters;
}

void LocalCallContractRequest::setParameters(
    const std::vector<utility::string_t>& value)
{
    m_Parameters = value;
    m_ParametersIsSet = true;
}

bool LocalCallContractRequest::parametersIsSet() const
{
    return m_ParametersIsSet;
}

void LocalCallContractRequest::unsetParameters() { m_ParametersIsSet = false; }
} // namespace model
} // namespace api
} // namespace stratis
