/**
 * Stratis Node API
 * Access to the Stratis Node's api.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "lightweightapi/model/BlockModel.h"

namespace stratis {
namespace api {
namespace model {

BlockModel::BlockModel()
{
    m_Hash = utility::conversions::to_string_t("");
    m_HashIsSet = false;
    m_Confirmations = 0;
    m_ConfirmationsIsSet = false;
    m_Size = 0;
    m_SizeIsSet = false;
    m_Weight = 0L;
    m_WeightIsSet = false;
    m_Height = 0;
    m_HeightIsSet = false;
    m_Version = 0;
    m_VersionIsSet = false;
    m_VersionHex = utility::conversions::to_string_t("");
    m_VersionHexIsSet = false;
    m_Merkleroot = utility::conversions::to_string_t("");
    m_MerklerootIsSet = false;
    m_TxIsSet = false;
    m_Time = 0L;
    m_TimeIsSet = false;
    m_Mediantime = 0L;
    m_MediantimeIsSet = false;
    m_Nonce = 0;
    m_NonceIsSet = false;
    m_Bits = utility::conversions::to_string_t("");
    m_BitsIsSet = false;
    m_Difficulty = 0.0;
    m_DifficultyIsSet = false;
    m_Chainwork = utility::conversions::to_string_t("");
    m_ChainworkIsSet = false;
    m_NTx = 0;
    m_NTxIsSet = false;
    m_Previousblockhash = utility::conversions::to_string_t("");
    m_PreviousblockhashIsSet = false;
    m_Nextblockhash = utility::conversions::to_string_t("");
    m_NextblockhashIsSet = false;
    m_Signature = utility::conversions::to_string_t("");
    m_SignatureIsSet = false;
    m_Modifierv2 = utility::conversions::to_string_t("");
    m_Modifierv2IsSet = false;
    m_Flags = utility::conversions::to_string_t("");
    m_FlagsIsSet = false;
    m_Hashproof = utility::conversions::to_string_t("");
    m_HashproofIsSet = false;
    m_Blocktrust = utility::conversions::to_string_t("");
    m_BlocktrustIsSet = false;
    m_Chaintrust = utility::conversions::to_string_t("");
    m_ChaintrustIsSet = false;
}

BlockModel::~BlockModel() {}

void BlockModel::validate()
{
    // TODO: implement validation
}

web::json::value BlockModel::toJson() const
{
    web::json::value val = web::json::value::object();

    if (m_HashIsSet) {
        val[utility::conversions::to_string_t(U("hash"))] =
            ModelBase::toJson(m_Hash);
    }
    if (m_ConfirmationsIsSet) {
        val[utility::conversions::to_string_t(U("confirmations"))] =
            ModelBase::toJson(m_Confirmations);
    }
    if (m_SizeIsSet) {
        val[utility::conversions::to_string_t(U("size"))] =
            ModelBase::toJson(m_Size);
    }
    if (m_WeightIsSet) {
        val[utility::conversions::to_string_t(U("weight"))] =
            ModelBase::toJson(m_Weight);
    }
    if (m_HeightIsSet) {
        val[utility::conversions::to_string_t(U("height"))] =
            ModelBase::toJson(m_Height);
    }
    if (m_VersionIsSet) {
        val[utility::conversions::to_string_t(U("version"))] =
            ModelBase::toJson(m_Version);
    }
    if (m_VersionHexIsSet) {
        val[utility::conversions::to_string_t(U("versionHex"))] =
            ModelBase::toJson(m_VersionHex);
    }
    if (m_MerklerootIsSet) {
        val[utility::conversions::to_string_t(U("merkleroot"))] =
            ModelBase::toJson(m_Merkleroot);
    }
    if (m_TxIsSet) {
        val[utility::conversions::to_string_t(U("tx"))] = ModelBase::toJson(m_Tx);
    }
    if (m_TimeIsSet) {
        val[utility::conversions::to_string_t(U("time"))] =
            ModelBase::toJson(m_Time);
    }
    if (m_MediantimeIsSet) {
        val[utility::conversions::to_string_t(U("mediantime"))] =
            ModelBase::toJson(m_Mediantime);
    }
    if (m_NonceIsSet) {
        val[utility::conversions::to_string_t(U("nonce"))] =
            ModelBase::toJson(m_Nonce);
    }
    if (m_BitsIsSet) {
        val[utility::conversions::to_string_t(U("bits"))] =
            ModelBase::toJson(m_Bits);
    }
    if (m_DifficultyIsSet) {
        val[utility::conversions::to_string_t(U("difficulty"))] =
            ModelBase::toJson(m_Difficulty);
    }
    if (m_ChainworkIsSet) {
        val[utility::conversions::to_string_t(U("chainwork"))] =
            ModelBase::toJson(m_Chainwork);
    }
    if (m_NTxIsSet) {
        val[utility::conversions::to_string_t(U("nTx"))] = ModelBase::toJson(m_NTx);
    }
    if (m_PreviousblockhashIsSet) {
        val[utility::conversions::to_string_t(U("previousblockhash"))] =
            ModelBase::toJson(m_Previousblockhash);
    }
    if (m_NextblockhashIsSet) {
        val[utility::conversions::to_string_t(U("nextblockhash"))] =
            ModelBase::toJson(m_Nextblockhash);
    }
    if (m_SignatureIsSet) {
        val[utility::conversions::to_string_t(U("signature"))] =
            ModelBase::toJson(m_Signature);
    }
    if (m_Modifierv2IsSet) {
        val[utility::conversions::to_string_t(U("modifierv2"))] =
            ModelBase::toJson(m_Modifierv2);
    }
    if (m_FlagsIsSet) {
        val[utility::conversions::to_string_t(U("flags"))] =
            ModelBase::toJson(m_Flags);
    }
    if (m_HashproofIsSet) {
        val[utility::conversions::to_string_t(U("hashproof"))] =
            ModelBase::toJson(m_Hashproof);
    }
    if (m_BlocktrustIsSet) {
        val[utility::conversions::to_string_t(U("blocktrust"))] =
            ModelBase::toJson(m_Blocktrust);
    }
    if (m_ChaintrustIsSet) {
        val[utility::conversions::to_string_t(U("chaintrust"))] =
            ModelBase::toJson(m_Chaintrust);
    }

    return val;
}

bool BlockModel::fromJson(const web::json::value& val)
{
    bool ok = true;

    if (val.has_field(utility::conversions::to_string_t(U("hash")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("hash")));
        if (!fieldValue.is_null()) {
            utility::string_t refVal_setHash;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHash);
            setHash(refVal_setHash);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("confirmations")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("confirmations")));
        if (!fieldValue.is_null()) {
            int32_t refVal_setConfirmations;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConfirmations);
            setConfirmations(refVal_setConfirmations);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("size")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("size")));
        if (!fieldValue.is_null()) {
            int32_t refVal_setSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSize);
            setSize(refVal_setSize);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("weight")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("weight")));
        if (!fieldValue.is_null()) {
            int64_t refVal_setWeight;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWeight);
            setWeight(refVal_setWeight);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("height")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("height")));
        if (!fieldValue.is_null()) {
            int32_t refVal_setHeight;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHeight);
            setHeight(refVal_setHeight);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("version")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("version")));
        if (!fieldValue.is_null()) {
            int32_t refVal_setVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVersion);
            setVersion(refVal_setVersion);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("versionHex")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("versionHex")));
        if (!fieldValue.is_null()) {
            utility::string_t refVal_setVersionHex;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVersionHex);
            setVersionHex(refVal_setVersionHex);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("merkleroot")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("merkleroot")));
        if (!fieldValue.is_null()) {
            utility::string_t refVal_setMerkleroot;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMerkleroot);
            setMerkleroot(refVal_setMerkleroot);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("tx")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("tx")));
        if (!fieldValue.is_null()) {
            std::vector<std::shared_ptr<Object>> refVal_setTx;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTx);
            setTx(refVal_setTx);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("time")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("time")));
        if (!fieldValue.is_null()) {
            int64_t refVal_setTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTime);
            setTime(refVal_setTime);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("mediantime")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("mediantime")));
        if (!fieldValue.is_null()) {
            int64_t refVal_setMediantime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMediantime);
            setMediantime(refVal_setMediantime);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("nonce")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("nonce")));
        if (!fieldValue.is_null()) {
            int32_t refVal_setNonce;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNonce);
            setNonce(refVal_setNonce);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("bits")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("bits")));
        if (!fieldValue.is_null()) {
            utility::string_t refVal_setBits;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBits);
            setBits(refVal_setBits);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("difficulty")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("difficulty")));
        if (!fieldValue.is_null()) {
            double refVal_setDifficulty;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDifficulty);
            setDifficulty(refVal_setDifficulty);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("chainwork")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("chainwork")));
        if (!fieldValue.is_null()) {
            utility::string_t refVal_setChainwork;
            ok &= ModelBase::fromJson(fieldValue, refVal_setChainwork);
            setChainwork(refVal_setChainwork);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("nTx")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("nTx")));
        if (!fieldValue.is_null()) {
            int32_t refVal_setNTx;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNTx);
            setNTx(refVal_setNTx);
        }
    }
    if (val.has_field(
            utility::conversions::to_string_t(U("previousblockhash")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("previousblockhash")));
        if (!fieldValue.is_null()) {
            utility::string_t refVal_setPreviousblockhash;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPreviousblockhash);
            setPreviousblockhash(refVal_setPreviousblockhash);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("nextblockhash")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("nextblockhash")));
        if (!fieldValue.is_null()) {
            utility::string_t refVal_setNextblockhash;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNextblockhash);
            setNextblockhash(refVal_setNextblockhash);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("signature")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("signature")));
        if (!fieldValue.is_null()) {
            utility::string_t refVal_setSignature;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSignature);
            setSignature(refVal_setSignature);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("modifierv2")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("modifierv2")));
        if (!fieldValue.is_null()) {
            utility::string_t refVal_setModifierv2;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModifierv2);
            setModifierv2(refVal_setModifierv2);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("flags")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("flags")));
        if (!fieldValue.is_null()) {
            utility::string_t refVal_setFlags;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFlags);
            setFlags(refVal_setFlags);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("hashproof")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("hashproof")));
        if (!fieldValue.is_null()) {
            utility::string_t refVal_setHashproof;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHashproof);
            setHashproof(refVal_setHashproof);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("blocktrust")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("blocktrust")));
        if (!fieldValue.is_null()) {
            utility::string_t refVal_setBlocktrust;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlocktrust);
            setBlocktrust(refVal_setBlocktrust);
        }
    }
    if (val.has_field(utility::conversions::to_string_t(U("chaintrust")))) {
        const web::json::value& fieldValue =
            val.at(utility::conversions::to_string_t(U("chaintrust")));
        if (!fieldValue.is_null()) {
            utility::string_t refVal_setChaintrust;
            ok &= ModelBase::fromJson(fieldValue, refVal_setChaintrust);
            setChaintrust(refVal_setChaintrust);
        }
    }
    return ok;
}

void BlockModel::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                             const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                     utility::conversions::to_string_t(U("."))) {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if (m_HashIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("hash")), m_Hash));
    }
    if (m_ConfirmationsIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("confirmations")),
            m_Confirmations));
    }
    if (m_SizeIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("size")), m_Size));
    }
    if (m_WeightIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("weight")), m_Weight));
    }
    if (m_HeightIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("height")), m_Height));
    }
    if (m_VersionIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("version")),
            m_Version));
    }
    if (m_VersionHexIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("versionHex")),
            m_VersionHex));
    }
    if (m_MerklerootIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("merkleroot")),
            m_Merkleroot));
    }
    if (m_TxIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("tx")), m_Tx));
    }
    if (m_TimeIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("time")), m_Time));
    }
    if (m_MediantimeIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("mediantime")),
            m_Mediantime));
    }
    if (m_NonceIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("nonce")), m_Nonce));
    }
    if (m_BitsIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("bits")), m_Bits));
    }
    if (m_DifficultyIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("difficulty")),
            m_Difficulty));
    }
    if (m_ChainworkIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("chainwork")),
            m_Chainwork));
    }
    if (m_NTxIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("nTx")), m_NTx));
    }
    if (m_PreviousblockhashIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("previousblockhash")),
            m_Previousblockhash));
    }
    if (m_NextblockhashIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("nextblockhash")),
            m_Nextblockhash));
    }
    if (m_SignatureIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("signature")),
            m_Signature));
    }
    if (m_Modifierv2IsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("modifierv2")),
            m_Modifierv2));
    }
    if (m_FlagsIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("flags")), m_Flags));
    }
    if (m_HashproofIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("hashproof")),
            m_Hashproof));
    }
    if (m_BlocktrustIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("blocktrust")),
            m_Blocktrust));
    }
    if (m_ChaintrustIsSet) {
        multipart->add(ModelBase::toHttpContent(
            namePrefix + utility::conversions::to_string_t(U("chaintrust")),
            m_Chaintrust));
    }
}

bool BlockModel::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                               const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                     utility::conversions::to_string_t(U("."))) {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if (multipart->hasContent(utility::conversions::to_string_t(U("hash")))) {
        utility::string_t refVal_setHash;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(utility::conversions::to_string_t(U("hash"))),
            refVal_setHash);
        setHash(refVal_setHash);
    }
    if (multipart->hasContent(
            utility::conversions::to_string_t(U("confirmations")))) {
        int32_t refVal_setConfirmations;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(
                utility::conversions::to_string_t(U("confirmations"))),
            refVal_setConfirmations);
        setConfirmations(refVal_setConfirmations);
    }
    if (multipart->hasContent(utility::conversions::to_string_t(U("size")))) {
        int32_t refVal_setSize;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(utility::conversions::to_string_t(U("size"))),
            refVal_setSize);
        setSize(refVal_setSize);
    }
    if (multipart->hasContent(utility::conversions::to_string_t(U("weight")))) {
        int64_t refVal_setWeight;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(utility::conversions::to_string_t(U("weight"))),
            refVal_setWeight);
        setWeight(refVal_setWeight);
    }
    if (multipart->hasContent(utility::conversions::to_string_t(U("height")))) {
        int32_t refVal_setHeight;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(utility::conversions::to_string_t(U("height"))),
            refVal_setHeight);
        setHeight(refVal_setHeight);
    }
    if (multipart->hasContent(utility::conversions::to_string_t(U("version")))) {
        int32_t refVal_setVersion;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(utility::conversions::to_string_t(U("version"))),
            refVal_setVersion);
        setVersion(refVal_setVersion);
    }
    if (multipart->hasContent(
            utility::conversions::to_string_t(U("versionHex")))) {
        utility::string_t refVal_setVersionHex;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(
                utility::conversions::to_string_t(U("versionHex"))),
            refVal_setVersionHex);
        setVersionHex(refVal_setVersionHex);
    }
    if (multipart->hasContent(
            utility::conversions::to_string_t(U("merkleroot")))) {
        utility::string_t refVal_setMerkleroot;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(
                utility::conversions::to_string_t(U("merkleroot"))),
            refVal_setMerkleroot);
        setMerkleroot(refVal_setMerkleroot);
    }
    if (multipart->hasContent(utility::conversions::to_string_t(U("tx")))) {
        std::vector<std::shared_ptr<Object>> refVal_setTx;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(utility::conversions::to_string_t(U("tx"))),
            refVal_setTx);
        setTx(refVal_setTx);
    }
    if (multipart->hasContent(utility::conversions::to_string_t(U("time")))) {
        int64_t refVal_setTime;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(utility::conversions::to_string_t(U("time"))),
            refVal_setTime);
        setTime(refVal_setTime);
    }
    if (multipart->hasContent(
            utility::conversions::to_string_t(U("mediantime")))) {
        int64_t refVal_setMediantime;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(
                utility::conversions::to_string_t(U("mediantime"))),
            refVal_setMediantime);
        setMediantime(refVal_setMediantime);
    }
    if (multipart->hasContent(utility::conversions::to_string_t(U("nonce")))) {
        int32_t refVal_setNonce;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(utility::conversions::to_string_t(U("nonce"))),
            refVal_setNonce);
        setNonce(refVal_setNonce);
    }
    if (multipart->hasContent(utility::conversions::to_string_t(U("bits")))) {
        utility::string_t refVal_setBits;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(utility::conversions::to_string_t(U("bits"))),
            refVal_setBits);
        setBits(refVal_setBits);
    }
    if (multipart->hasContent(
            utility::conversions::to_string_t(U("difficulty")))) {
        double refVal_setDifficulty;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(
                utility::conversions::to_string_t(U("difficulty"))),
            refVal_setDifficulty);
        setDifficulty(refVal_setDifficulty);
    }
    if (multipart->hasContent(
            utility::conversions::to_string_t(U("chainwork")))) {
        utility::string_t refVal_setChainwork;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(
                utility::conversions::to_string_t(U("chainwork"))),
            refVal_setChainwork);
        setChainwork(refVal_setChainwork);
    }
    if (multipart->hasContent(utility::conversions::to_string_t(U("nTx")))) {
        int32_t refVal_setNTx;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(utility::conversions::to_string_t(U("nTx"))),
            refVal_setNTx);
        setNTx(refVal_setNTx);
    }
    if (multipart->hasContent(
            utility::conversions::to_string_t(U("previousblockhash")))) {
        utility::string_t refVal_setPreviousblockhash;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(
                utility::conversions::to_string_t(U("previousblockhash"))),
            refVal_setPreviousblockhash);
        setPreviousblockhash(refVal_setPreviousblockhash);
    }
    if (multipart->hasContent(
            utility::conversions::to_string_t(U("nextblockhash")))) {
        utility::string_t refVal_setNextblockhash;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(
                utility::conversions::to_string_t(U("nextblockhash"))),
            refVal_setNextblockhash);
        setNextblockhash(refVal_setNextblockhash);
    }
    if (multipart->hasContent(
            utility::conversions::to_string_t(U("signature")))) {
        utility::string_t refVal_setSignature;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(
                utility::conversions::to_string_t(U("signature"))),
            refVal_setSignature);
        setSignature(refVal_setSignature);
    }
    if (multipart->hasContent(
            utility::conversions::to_string_t(U("modifierv2")))) {
        utility::string_t refVal_setModifierv2;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(
                utility::conversions::to_string_t(U("modifierv2"))),
            refVal_setModifierv2);
        setModifierv2(refVal_setModifierv2);
    }
    if (multipart->hasContent(utility::conversions::to_string_t(U("flags")))) {
        utility::string_t refVal_setFlags;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(utility::conversions::to_string_t(U("flags"))),
            refVal_setFlags);
        setFlags(refVal_setFlags);
    }
    if (multipart->hasContent(
            utility::conversions::to_string_t(U("hashproof")))) {
        utility::string_t refVal_setHashproof;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(
                utility::conversions::to_string_t(U("hashproof"))),
            refVal_setHashproof);
        setHashproof(refVal_setHashproof);
    }
    if (multipart->hasContent(
            utility::conversions::to_string_t(U("blocktrust")))) {
        utility::string_t refVal_setBlocktrust;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(
                utility::conversions::to_string_t(U("blocktrust"))),
            refVal_setBlocktrust);
        setBlocktrust(refVal_setBlocktrust);
    }
    if (multipart->hasContent(
            utility::conversions::to_string_t(U("chaintrust")))) {
        utility::string_t refVal_setChaintrust;
        ok &= ModelBase::fromHttpContent(
            multipart->getContent(
                utility::conversions::to_string_t(U("chaintrust"))),
            refVal_setChaintrust);
        setChaintrust(refVal_setChaintrust);
    }
    return ok;
}

utility::string_t BlockModel::getHash() const { return m_Hash; }

void BlockModel::setHash(const utility::string_t& value)
{
    m_Hash = value;
    m_HashIsSet = true;
}

bool BlockModel::hashIsSet() const { return m_HashIsSet; }

void BlockModel::unsetHash() { m_HashIsSet = false; }
int32_t BlockModel::getConfirmations() const { return m_Confirmations; }

void BlockModel::setConfirmations(int32_t value)
{
    m_Confirmations = value;
    m_ConfirmationsIsSet = true;
}

bool BlockModel::confirmationsIsSet() const { return m_ConfirmationsIsSet; }

void BlockModel::unsetConfirmations() { m_ConfirmationsIsSet = false; }
int32_t BlockModel::getSize() const { return m_Size; }

void BlockModel::setSize(int32_t value)
{
    m_Size = value;
    m_SizeIsSet = true;
}

bool BlockModel::sizeIsSet() const { return m_SizeIsSet; }

void BlockModel::unsetSize() { m_SizeIsSet = false; }
int64_t BlockModel::getWeight() const { return m_Weight; }

void BlockModel::setWeight(int64_t value)
{
    m_Weight = value;
    m_WeightIsSet = true;
}

bool BlockModel::weightIsSet() const { return m_WeightIsSet; }

void BlockModel::unsetWeight() { m_WeightIsSet = false; }
int32_t BlockModel::getHeight() const { return m_Height; }

void BlockModel::setHeight(int32_t value)
{
    m_Height = value;
    m_HeightIsSet = true;
}

bool BlockModel::heightIsSet() const { return m_HeightIsSet; }

void BlockModel::unsetHeight() { m_HeightIsSet = false; }
int32_t BlockModel::getVersion() const { return m_Version; }

void BlockModel::setVersion(int32_t value)
{
    m_Version = value;
    m_VersionIsSet = true;
}

bool BlockModel::versionIsSet() const { return m_VersionIsSet; }

void BlockModel::unsetVersion() { m_VersionIsSet = false; }
utility::string_t BlockModel::getVersionHex() const { return m_VersionHex; }

void BlockModel::setVersionHex(const utility::string_t& value)
{
    m_VersionHex = value;
    m_VersionHexIsSet = true;
}

bool BlockModel::versionHexIsSet() const { return m_VersionHexIsSet; }

void BlockModel::unsetVersionHex() { m_VersionHexIsSet = false; }
utility::string_t BlockModel::getMerkleroot() const { return m_Merkleroot; }

void BlockModel::setMerkleroot(const utility::string_t& value)
{
    m_Merkleroot = value;
    m_MerklerootIsSet = true;
}

bool BlockModel::merklerootIsSet() const { return m_MerklerootIsSet; }

void BlockModel::unsetMerkleroot() { m_MerklerootIsSet = false; }
std::vector<std::shared_ptr<Object>>& BlockModel::getTx() { return m_Tx; }

void BlockModel::setTx(const std::vector<std::shared_ptr<Object>>& value)
{
    m_Tx = value;
    m_TxIsSet = true;
}

bool BlockModel::txIsSet() const { return m_TxIsSet; }

void BlockModel::unsetTx() { m_TxIsSet = false; }
int64_t BlockModel::getTime() const { return m_Time; }

void BlockModel::setTime(int64_t value)
{
    m_Time = value;
    m_TimeIsSet = true;
}

bool BlockModel::timeIsSet() const { return m_TimeIsSet; }

void BlockModel::unsetTime() { m_TimeIsSet = false; }
int64_t BlockModel::getMediantime() const { return m_Mediantime; }

void BlockModel::setMediantime(int64_t value)
{
    m_Mediantime = value;
    m_MediantimeIsSet = true;
}

bool BlockModel::mediantimeIsSet() const { return m_MediantimeIsSet; }

void BlockModel::unsetMediantime() { m_MediantimeIsSet = false; }
int32_t BlockModel::getNonce() const { return m_Nonce; }

void BlockModel::setNonce(int32_t value)
{
    m_Nonce = value;
    m_NonceIsSet = true;
}

bool BlockModel::nonceIsSet() const { return m_NonceIsSet; }

void BlockModel::unsetNonce() { m_NonceIsSet = false; }
utility::string_t BlockModel::getBits() const { return m_Bits; }

void BlockModel::setBits(const utility::string_t& value)
{
    m_Bits = value;
    m_BitsIsSet = true;
}

bool BlockModel::bitsIsSet() const { return m_BitsIsSet; }

void BlockModel::unsetBits() { m_BitsIsSet = false; }
double BlockModel::getDifficulty() const { return m_Difficulty; }

void BlockModel::setDifficulty(double value)
{
    m_Difficulty = value;
    m_DifficultyIsSet = true;
}

bool BlockModel::difficultyIsSet() const { return m_DifficultyIsSet; }

void BlockModel::unsetDifficulty() { m_DifficultyIsSet = false; }
utility::string_t BlockModel::getChainwork() const { return m_Chainwork; }

void BlockModel::setChainwork(const utility::string_t& value)
{
    m_Chainwork = value;
    m_ChainworkIsSet = true;
}

bool BlockModel::chainworkIsSet() const { return m_ChainworkIsSet; }

void BlockModel::unsetChainwork() { m_ChainworkIsSet = false; }
int32_t BlockModel::getNTx() const { return m_NTx; }

void BlockModel::setNTx(int32_t value)
{
    m_NTx = value;
    m_NTxIsSet = true;
}

bool BlockModel::nTxIsSet() const { return m_NTxIsSet; }

void BlockModel::unsetNTx() { m_NTxIsSet = false; }
utility::string_t BlockModel::getPreviousblockhash() const
{
    return m_Previousblockhash;
}

void BlockModel::setPreviousblockhash(const utility::string_t& value)
{
    m_Previousblockhash = value;
    m_PreviousblockhashIsSet = true;
}

bool BlockModel::previousblockhashIsSet() const
{
    return m_PreviousblockhashIsSet;
}

void BlockModel::unsetPreviousblockhash() { m_PreviousblockhashIsSet = false; }
utility::string_t BlockModel::getNextblockhash() const
{
    return m_Nextblockhash;
}

void BlockModel::setNextblockhash(const utility::string_t& value)
{
    m_Nextblockhash = value;
    m_NextblockhashIsSet = true;
}

bool BlockModel::nextblockhashIsSet() const { return m_NextblockhashIsSet; }

void BlockModel::unsetNextblockhash() { m_NextblockhashIsSet = false; }
utility::string_t BlockModel::getSignature() const { return m_Signature; }

void BlockModel::setSignature(const utility::string_t& value)
{
    m_Signature = value;
    m_SignatureIsSet = true;
}

bool BlockModel::signatureIsSet() const { return m_SignatureIsSet; }

void BlockModel::unsetSignature() { m_SignatureIsSet = false; }
utility::string_t BlockModel::getModifierv2() const { return m_Modifierv2; }

void BlockModel::setModifierv2(const utility::string_t& value)
{
    m_Modifierv2 = value;
    m_Modifierv2IsSet = true;
}

bool BlockModel::modifierv2IsSet() const { return m_Modifierv2IsSet; }

void BlockModel::unsetModifierv2() { m_Modifierv2IsSet = false; }
utility::string_t BlockModel::getFlags() const { return m_Flags; }

void BlockModel::setFlags(const utility::string_t& value)
{
    m_Flags = value;
    m_FlagsIsSet = true;
}

bool BlockModel::flagsIsSet() const { return m_FlagsIsSet; }

void BlockModel::unsetFlags() { m_FlagsIsSet = false; }
utility::string_t BlockModel::getHashproof() const { return m_Hashproof; }

void BlockModel::setHashproof(const utility::string_t& value)
{
    m_Hashproof = value;
    m_HashproofIsSet = true;
}

bool BlockModel::hashproofIsSet() const { return m_HashproofIsSet; }

void BlockModel::unsetHashproof() { m_HashproofIsSet = false; }
utility::string_t BlockModel::getBlocktrust() const { return m_Blocktrust; }

void BlockModel::setBlocktrust(const utility::string_t& value)
{
    m_Blocktrust = value;
    m_BlocktrustIsSet = true;
}

bool BlockModel::blocktrustIsSet() const { return m_BlocktrustIsSet; }

void BlockModel::unsetBlocktrust() { m_BlocktrustIsSet = false; }
utility::string_t BlockModel::getChaintrust() const { return m_Chaintrust; }

void BlockModel::setChaintrust(const utility::string_t& value)
{
    m_Chaintrust = value;
    m_ChaintrustIsSet = true;
}

bool BlockModel::chaintrustIsSet() const { return m_ChaintrustIsSet; }

void BlockModel::unsetChaintrust() { m_ChaintrustIsSet = false; }
} // namespace model
} // namespace api
} // namespace stratis
