/**
 * Stratis Node API
 * Access to the Stratis Node's api.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "StratisCPPLightClient/model/ValidatedAddress.h"

namespace stratis {
namespace api {
namespace model {

ValidatedAddress::ValidatedAddress() {
  m_Isvalid = false;
  m_IsvalidIsSet = false;
  m_Address = utility::conversions::to_string_t("");
  m_AddressIsSet = false;
  m_ScriptPubKey = utility::conversions::to_string_t("");
  m_ScriptPubKeyIsSet = false;
  m_Isscript = false;
  m_IsscriptIsSet = false;
  m_Iswitness = false;
  m_IswitnessIsSet = false;
}

ValidatedAddress::~ValidatedAddress() {}

void ValidatedAddress::validate() {
  // TODO: implement validation
}

web::json::value ValidatedAddress::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_IsvalidIsSet) {
    val[utility::conversions::to_string_t(U("isvalid"))] =
        ModelBase::toJson(m_Isvalid);
  }
  if (m_AddressIsSet) {
    val[utility::conversions::to_string_t(U("address"))] =
        ModelBase::toJson(m_Address);
  }
  if (m_ScriptPubKeyIsSet) {
    val[utility::conversions::to_string_t(U("scriptPubKey"))] =
        ModelBase::toJson(m_ScriptPubKey);
  }
  if (m_IsscriptIsSet) {
    val[utility::conversions::to_string_t(U("isscript"))] =
        ModelBase::toJson(m_Isscript);
  }
  if (m_IswitnessIsSet) {
    val[utility::conversions::to_string_t(U("iswitness"))] =
        ModelBase::toJson(m_Iswitness);
  }

  return val;
}

bool ValidatedAddress::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("isvalid")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("isvalid")));
    if (!fieldValue.is_null()) {
      bool refVal_setIsvalid;
      ok &= ModelBase::fromJson(fieldValue, refVal_setIsvalid);
      setIsvalid(refVal_setIsvalid);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("address")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("address")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setAddress;
      ok &= ModelBase::fromJson(fieldValue, refVal_setAddress);
      setAddress(refVal_setAddress);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("scriptPubKey")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("scriptPubKey")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setScriptPubKey;
      ok &= ModelBase::fromJson(fieldValue, refVal_setScriptPubKey);
      setScriptPubKey(refVal_setScriptPubKey);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("isscript")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("isscript")));
    if (!fieldValue.is_null()) {
      bool refVal_setIsscript;
      ok &= ModelBase::fromJson(fieldValue, refVal_setIsscript);
      setIsscript(refVal_setIsscript);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("iswitness")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("iswitness")));
    if (!fieldValue.is_null()) {
      bool refVal_setIswitness;
      ok &= ModelBase::fromJson(fieldValue, refVal_setIswitness);
      setIswitness(refVal_setIswitness);
    }
  }
  return ok;
}

void ValidatedAddress::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                                   const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_IsvalidIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("isvalid")),
        m_Isvalid));
  }
  if (m_AddressIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("address")),
        m_Address));
  }
  if (m_ScriptPubKeyIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("scriptPubKey")),
        m_ScriptPubKey));
  }
  if (m_IsscriptIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("isscript")),
        m_Isscript));
  }
  if (m_IswitnessIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("iswitness")),
        m_Iswitness));
  }
}

bool ValidatedAddress::fromMultiPart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("isvalid")))) {
    bool refVal_setIsvalid;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("isvalid"))),
        refVal_setIsvalid);
    setIsvalid(refVal_setIsvalid);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("address")))) {
    utility::string_t refVal_setAddress;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("address"))),
        refVal_setAddress);
    setAddress(refVal_setAddress);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("scriptPubKey")))) {
    utility::string_t refVal_setScriptPubKey;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("scriptPubKey"))),
        refVal_setScriptPubKey);
    setScriptPubKey(refVal_setScriptPubKey);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("isscript")))) {
    bool refVal_setIsscript;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("isscript"))),
        refVal_setIsscript);
    setIsscript(refVal_setIsscript);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("iswitness")))) {
    bool refVal_setIswitness;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("iswitness"))),
        refVal_setIswitness);
    setIswitness(refVal_setIswitness);
  }
  return ok;
}

bool ValidatedAddress::isIsvalid() const { return m_Isvalid; }

void ValidatedAddress::setIsvalid(bool value) {
  m_Isvalid = value;
  m_IsvalidIsSet = true;
}

bool ValidatedAddress::isvalidIsSet() const { return m_IsvalidIsSet; }

void ValidatedAddress::unsetIsvalid() { m_IsvalidIsSet = false; }
utility::string_t ValidatedAddress::getAddress() const { return m_Address; }

void ValidatedAddress::setAddress(const utility::string_t &value) {
  m_Address = value;
  m_AddressIsSet = true;
}

bool ValidatedAddress::addressIsSet() const { return m_AddressIsSet; }

void ValidatedAddress::unsetAddress() { m_AddressIsSet = false; }
utility::string_t ValidatedAddress::getScriptPubKey() const {
  return m_ScriptPubKey;
}

void ValidatedAddress::setScriptPubKey(const utility::string_t &value) {
  m_ScriptPubKey = value;
  m_ScriptPubKeyIsSet = true;
}

bool ValidatedAddress::scriptPubKeyIsSet() const { return m_ScriptPubKeyIsSet; }

void ValidatedAddress::unsetScriptPubKey() { m_ScriptPubKeyIsSet = false; }
bool ValidatedAddress::isIsscript() const { return m_Isscript; }

void ValidatedAddress::setIsscript(bool value) {
  m_Isscript = value;
  m_IsscriptIsSet = true;
}

bool ValidatedAddress::isscriptIsSet() const { return m_IsscriptIsSet; }

void ValidatedAddress::unsetIsscript() { m_IsscriptIsSet = false; }
bool ValidatedAddress::isIswitness() const { return m_Iswitness; }

void ValidatedAddress::setIswitness(bool value) {
  m_Iswitness = value;
  m_IswitnessIsSet = true;
}

bool ValidatedAddress::iswitnessIsSet() const { return m_IswitnessIsSet; }

void ValidatedAddress::unsetIswitness() { m_IswitnessIsSet = false; }
} // namespace model
} // namespace api
} // namespace stratis
