/**
 * Stratis Node API
 * Access to the Stratis Node's api.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "StratisCPPLightClient/model/TransferInfo.h"

namespace stratis {
namespace api {
namespace model {

TransferInfo::TransferInfo() {
  m_From = utility::conversions::to_string_t("");
  m_FromIsSet = false;
  m_To = utility::conversions::to_string_t("");
  m_ToIsSet = false;
  m_Value = 0L;
  m_ValueIsSet = false;
}

TransferInfo::~TransferInfo() {}

void TransferInfo::validate() {
  // TODO: implement validation
}

web::json::value TransferInfo::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_FromIsSet) {
    val[utility::conversions::to_string_t(U("From"))] =
        ModelBase::toJson(m_From);
  }
  if (m_ToIsSet) {
    val[utility::conversions::to_string_t(U("To"))] = ModelBase::toJson(m_To);
  }
  if (m_ValueIsSet) {
    val[utility::conversions::to_string_t(U("Value"))] =
        ModelBase::toJson(m_Value);
  }

  return val;
}

bool TransferInfo::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("From")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("From")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setFrom;
      ok &= ModelBase::fromJson(fieldValue, refVal_setFrom);
      setFrom(refVal_setFrom);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("To")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("To")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setTo;
      ok &= ModelBase::fromJson(fieldValue, refVal_setTo);
      setTo(refVal_setTo);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("Value")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("Value")));
    if (!fieldValue.is_null()) {
      int64_t refVal_setValue;
      ok &= ModelBase::fromJson(fieldValue, refVal_setValue);
      setValue(refVal_setValue);
    }
  }
  return ok;
}

void TransferInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                               const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_FromIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("From")), m_From));
  }
  if (m_ToIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("To")), m_To));
  }
  if (m_ValueIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("Value")), m_Value));
  }
}

bool TransferInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                                 const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("From")))) {
    utility::string_t refVal_setFrom;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("From"))),
        refVal_setFrom);
    setFrom(refVal_setFrom);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("To")))) {
    utility::string_t refVal_setTo;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("To"))),
        refVal_setTo);
    setTo(refVal_setTo);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("Value")))) {
    int64_t refVal_setValue;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("Value"))),
        refVal_setValue);
    setValue(refVal_setValue);
  }
  return ok;
}

utility::string_t TransferInfo::getFrom() const { return m_From; }

void TransferInfo::setFrom(const utility::string_t &value) {
  m_From = value;
  m_FromIsSet = true;
}

bool TransferInfo::fromIsSet() const { return m_FromIsSet; }

void TransferInfo::unsetFrom() { m_FromIsSet = false; }
utility::string_t TransferInfo::getTo() const { return m_To; }

void TransferInfo::setTo(const utility::string_t &value) {
  m_To = value;
  m_ToIsSet = true;
}

bool TransferInfo::toIsSet() const { return m_ToIsSet; }

void TransferInfo::unsetTo() { m_ToIsSet = false; }
int64_t TransferInfo::getValue() const { return m_Value; }

void TransferInfo::setValue(int64_t value) {
  m_Value = value;
  m_ValueIsSet = true;
}

bool TransferInfo::valueIsSet() const { return m_ValueIsSet; }

void TransferInfo::unsetValue() { m_ValueIsSet = false; }
} // namespace model
} // namespace api
} // namespace stratis
