/**
 * Stratis Node API
 * Access to the Stratis Node's api.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "StratisCPPLightClient/model/WalletSendTransactionModel.h"

namespace stratis {
namespace api {
namespace model {

WalletSendTransactionModel::WalletSendTransactionModel() {
  m_TransactionId = utility::conversions::to_string_t("");
  m_TransactionIdIsSet = false;
  m_OutputsIsSet = false;
}

WalletSendTransactionModel::~WalletSendTransactionModel() {}

void WalletSendTransactionModel::validate() {
  // TODO: implement validation
}

web::json::value WalletSendTransactionModel::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_TransactionIdIsSet) {
    val[utility::conversions::to_string_t(U("transactionId"))] =
        ModelBase::toJson(m_TransactionId);
  }
  if (m_OutputsIsSet) {
    val[utility::conversions::to_string_t(U("outputs"))] =
        ModelBase::toJson(m_Outputs);
  }

  return val;
}

bool WalletSendTransactionModel::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("transactionId")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("transactionId")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setTransactionId;
      ok &= ModelBase::fromJson(fieldValue, refVal_setTransactionId);
      setTransactionId(refVal_setTransactionId);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("outputs")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("outputs")));
    if (!fieldValue.is_null()) {
      std::vector<std::shared_ptr<TransactionOutputModel>> refVal_setOutputs;
      ok &= ModelBase::fromJson(fieldValue, refVal_setOutputs);
      setOutputs(refVal_setOutputs);
    }
  }
  return ok;
}

void WalletSendTransactionModel::toMultipart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_TransactionIdIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("transactionId")),
        m_TransactionId));
  }
  if (m_OutputsIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("outputs")),
        m_Outputs));
  }
}

bool WalletSendTransactionModel::fromMultiPart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(
          utility::conversions::to_string_t(U("transactionId")))) {
    utility::string_t refVal_setTransactionId;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("transactionId"))),
        refVal_setTransactionId);
    setTransactionId(refVal_setTransactionId);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("outputs")))) {
    std::vector<std::shared_ptr<TransactionOutputModel>> refVal_setOutputs;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("outputs"))),
        refVal_setOutputs);
    setOutputs(refVal_setOutputs);
  }
  return ok;
}

utility::string_t WalletSendTransactionModel::getTransactionId() const {
  return m_TransactionId;
}

void WalletSendTransactionModel::setTransactionId(
    const utility::string_t &value) {
  m_TransactionId = value;
  m_TransactionIdIsSet = true;
}

bool WalletSendTransactionModel::transactionIdIsSet() const {
  return m_TransactionIdIsSet;
}

void WalletSendTransactionModel::unsetTransactionId() {
  m_TransactionIdIsSet = false;
}
std::vector<std::shared_ptr<TransactionOutputModel>> &
WalletSendTransactionModel::getOutputs() {
  return m_Outputs;
}

void WalletSendTransactionModel::setOutputs(
    const std::vector<std::shared_ptr<TransactionOutputModel>> &value) {
  m_Outputs = value;
  m_OutputsIsSet = true;
}

bool WalletSendTransactionModel::outputsIsSet() const { return m_OutputsIsSet; }

void WalletSendTransactionModel::unsetOutputs() { m_OutputsIsSet = false; }
} // namespace model
} // namespace api
} // namespace stratis
