/**
 * Stratis Node API
 * Access to the Stratis Node's api.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "StratisCPPLightClient/model/OwnedNFTsModel.h"

namespace stratis {
namespace api {
namespace model {

OwnedNFTsModel::OwnedNFTsModel() { m_OwnedIDsByContractAddressIsSet = false; }

OwnedNFTsModel::~OwnedNFTsModel() {}

void OwnedNFTsModel::validate() {
  // TODO: implement validation
}

web::json::value OwnedNFTsModel::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_OwnedIDsByContractAddressIsSet) {
    val[utility::conversions::to_string_t(U("OwnedIDsByContractAddress"))] =
        ModelBase::toJson(m_OwnedIDsByContractAddress);
  }

  return val;
}

bool OwnedNFTsModel::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(
          utility::conversions::to_string_t(U("OwnedIDsByContractAddress")))) {
    const web::json::value &fieldValue = val.at(
        utility::conversions::to_string_t(U("OwnedIDsByContractAddress")));
    if (!fieldValue.is_null()) {
      std::map<utility::string_t, std::vector<int64_t>>
          refVal_setOwnedIDsByContractAddress;
      ok &=
          ModelBase::fromJson(fieldValue, refVal_setOwnedIDsByContractAddress);
      setOwnedIDsByContractAddress(refVal_setOwnedIDsByContractAddress);
    }
  }
  return ok;
}

void OwnedNFTsModel::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                                 const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_OwnedIDsByContractAddressIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix +
            utility::conversions::to_string_t(U("OwnedIDsByContractAddress")),
        m_OwnedIDsByContractAddress));
  }
}

bool OwnedNFTsModel::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                                   const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(
          utility::conversions::to_string_t(U("OwnedIDsByContractAddress")))) {
    std::map<utility::string_t, std::vector<int64_t>>
        refVal_setOwnedIDsByContractAddress;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("OwnedIDsByContractAddress"))),
        refVal_setOwnedIDsByContractAddress);
    setOwnedIDsByContractAddress(refVal_setOwnedIDsByContractAddress);
  }
  return ok;
}

std::map<utility::string_t, std::vector<int64_t>> &
OwnedNFTsModel::getOwnedIDsByContractAddress() {
  return m_OwnedIDsByContractAddress;
}

void OwnedNFTsModel::setOwnedIDsByContractAddress(
    const std::map<utility::string_t, std::vector<int64_t>> &value) {
  m_OwnedIDsByContractAddress = value;
  m_OwnedIDsByContractAddressIsSet = true;
}

bool OwnedNFTsModel::ownedIDsByContractAddressIsSet() const {
  return m_OwnedIDsByContractAddressIsSet;
}

void OwnedNFTsModel::unsetOwnedIDsByContractAddress() {
  m_OwnedIDsByContractAddressIsSet = false;
}
} // namespace model
} // namespace api
} // namespace stratis
