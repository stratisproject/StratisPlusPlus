/**
 * Stratis Node API
 * Access to the Stratis Node's api.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "StratisCPPLightClient/model/ProblemDetails.h"

namespace stratis {
namespace api {
namespace model {

ProblemDetails::ProblemDetails() {
  m_Type = utility::conversions::to_string_t("");
  m_TypeIsSet = false;
  m_Title = utility::conversions::to_string_t("");
  m_TitleIsSet = false;
  m_Status = 0;
  m_StatusIsSet = false;
  m_Detail = utility::conversions::to_string_t("");
  m_DetailIsSet = false;
  m_Instance = utility::conversions::to_string_t("");
  m_InstanceIsSet = false;
}

ProblemDetails::~ProblemDetails() {}

void ProblemDetails::validate() {
  // TODO: implement validation
}

web::json::value ProblemDetails::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_TypeIsSet) {
    val[utility::conversions::to_string_t(U("Type"))] =
        ModelBase::toJson(m_Type);
  }
  if (m_TitleIsSet) {
    val[utility::conversions::to_string_t(U("Title"))] =
        ModelBase::toJson(m_Title);
  }
  if (m_StatusIsSet) {
    val[utility::conversions::to_string_t(U("Status"))] =
        ModelBase::toJson(m_Status);
  }
  if (m_DetailIsSet) {
    val[utility::conversions::to_string_t(U("Detail"))] =
        ModelBase::toJson(m_Detail);
  }
  if (m_InstanceIsSet) {
    val[utility::conversions::to_string_t(U("Instance"))] =
        ModelBase::toJson(m_Instance);
  }

  return val;
}

bool ProblemDetails::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("Type")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("Type")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setType;
      ok &= ModelBase::fromJson(fieldValue, refVal_setType);
      setType(refVal_setType);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("Title")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("Title")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setTitle;
      ok &= ModelBase::fromJson(fieldValue, refVal_setTitle);
      setTitle(refVal_setTitle);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("Status")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("Status")));
    if (!fieldValue.is_null()) {
      int32_t refVal_setStatus;
      ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
      setStatus(refVal_setStatus);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("Detail")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("Detail")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setDetail;
      ok &= ModelBase::fromJson(fieldValue, refVal_setDetail);
      setDetail(refVal_setDetail);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("Instance")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("Instance")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setInstance;
      ok &= ModelBase::fromJson(fieldValue, refVal_setInstance);
      setInstance(refVal_setInstance);
    }
  }
  return ok;
}

void ProblemDetails::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                                 const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_TypeIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("Type")), m_Type));
  }
  if (m_TitleIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("Title")), m_Title));
  }
  if (m_StatusIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("Status")), m_Status));
  }
  if (m_DetailIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("Detail")), m_Detail));
  }
  if (m_InstanceIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("Instance")),
        m_Instance));
  }
}

bool ProblemDetails::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                                   const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("Type")))) {
    utility::string_t refVal_setType;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("Type"))),
        refVal_setType);
    setType(refVal_setType);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("Title")))) {
    utility::string_t refVal_setTitle;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("Title"))),
        refVal_setTitle);
    setTitle(refVal_setTitle);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("Status")))) {
    int32_t refVal_setStatus;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("Status"))),
        refVal_setStatus);
    setStatus(refVal_setStatus);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("Detail")))) {
    utility::string_t refVal_setDetail;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("Detail"))),
        refVal_setDetail);
    setDetail(refVal_setDetail);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("Instance")))) {
    utility::string_t refVal_setInstance;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("Instance"))),
        refVal_setInstance);
    setInstance(refVal_setInstance);
  }
  return ok;
}

utility::string_t ProblemDetails::getType() const { return m_Type; }

void ProblemDetails::setType(const utility::string_t &value) {
  m_Type = value;
  m_TypeIsSet = true;
}

bool ProblemDetails::typeIsSet() const { return m_TypeIsSet; }

void ProblemDetails::unsetType() { m_TypeIsSet = false; }
utility::string_t ProblemDetails::getTitle() const { return m_Title; }

void ProblemDetails::setTitle(const utility::string_t &value) {
  m_Title = value;
  m_TitleIsSet = true;
}

bool ProblemDetails::titleIsSet() const { return m_TitleIsSet; }

void ProblemDetails::unsetTitle() { m_TitleIsSet = false; }
int32_t ProblemDetails::getStatus() const { return m_Status; }

void ProblemDetails::setStatus(int32_t value) {
  m_Status = value;
  m_StatusIsSet = true;
}

bool ProblemDetails::statusIsSet() const { return m_StatusIsSet; }

void ProblemDetails::unsetStatus() { m_StatusIsSet = false; }
utility::string_t ProblemDetails::getDetail() const { return m_Detail; }

void ProblemDetails::setDetail(const utility::string_t &value) {
  m_Detail = value;
  m_DetailIsSet = true;
}

bool ProblemDetails::detailIsSet() const { return m_DetailIsSet; }

void ProblemDetails::unsetDetail() { m_DetailIsSet = false; }
utility::string_t ProblemDetails::getInstance() const { return m_Instance; }

void ProblemDetails::setInstance(const utility::string_t &value) {
  m_Instance = value;
  m_InstanceIsSet = true;
}

bool ProblemDetails::instanceIsSet() const { return m_InstanceIsSet; }

void ProblemDetails::unsetInstance() { m_InstanceIsSet = false; }
} // namespace model
} // namespace api
} // namespace stratis
